/**
 * Sistema de Processamento de Mensagens - VERS√ÉO CORRIGIDA
 * Gerencia todas as mensagens recebidas: comandos, silenciamento, boas-vindas
 * 
 * CORRE√á√ïES APLICADAS:
 * - Sistema de boas-vindas agora respeita configura√ß√µes por grupo
 * - Verifica√ß√£o rigorosa de grupos permitidos
 * - Logs detalhados para debug
 * - Por padr√£o, boas-vindas ficam DESABILITADAS
 * 
 * @author Volleyball Team & Gemini AI
 * @version 3.1 - Corre√ß√£o do sistema de boas-vindas
 */

const logger = require('../utils/logger');
const { sendWelcomeMessage } = require('./client');
const { getCommandConfig } = require('../config/commands');
const { getCurrentDateTimeBR } = require('../utils/date');

class MessageHandler {
  constructor(commandHandler, cache) {
    this.commandHandler = commandHandler;
    this.cache = cache;
    logger.info('‚úÖ MessageHandler inicializado com corre√ß√µes aplicadas.');
  }

  /**
   * Ponto de entrada principal para processar qualquer mensagem recebida
   * Verifica silenciamento, processa comandos e sistema de figurinhas
   * @param {Client} client Cliente do WhatsApp
   * @param {Message} msg Mensagem recebida
   */
  async handle(client, msg) {
    try {
      // ===== VERIFICA√á√ÉO DE SILENCIAMENTO (PRIMEIRA PRIORIDADE) =====
      const isSilenced = await this.isSilenced(msg);
      if (isSilenced) {
        await this.deleteSilencedMessage(msg);
        return; // Para o processamento aqui - usu√°rio silenciado
      }

      const body = msg.body?.trim() || '';

      // ===== SISTEMA DE FIGURINHAS =====
      // Verifica se √© m√≠dia com comando !figurinha na descri√ß√£o
      if (msg.hasMedia && body.toLowerCase().includes('!figurinha')) {
        logger.info(`üé® Processando figurinha de ${msg.author || msg.from}`);
        await this.commandHandler.handleSticker(client, msg);
        return; // Finaliza processamento ap√≥s figurinha
      }

      // ===== SISTEMA DE COMANDOS =====
      // Verifica se a mensagem √© um comando (come√ßa com !)
      if (body.startsWith('!')) {
        logger.debug(`‚ö° Comando detectado: "${body}" de ${msg.author || msg.from}`);
        await this.commandHandler.handle(client, msg);
        return; // Finaliza processamento ap√≥s comando
      }

      // ===== OUTRAS MENSAGENS =====
      // Aqui voc√™ pode adicionar outros processamentos para mensagens n√£o-comando
      // Por exemplo: respostas autom√°ticas, contadores, etc.
      logger.debug(`üí¨ Mensagem comum processada de ${msg.author || msg.from}`);

    } catch (error) {
      logger.error(`‚ùå Erro ao processar mensagem: ${error.message}`);
      console.error('Stack trace:', error);
    }
  }

  /**
   * Verifica se o autor da mensagem est√° silenciado
   * Utiliza cache para performance otimizada
   * @param {Message} msg Mensagem a ser verificada
   * @returns {Promise<boolean>} True se o usu√°rio est√° silenciado
   */
  async isSilenced(msg) {
    try {
      const chat = await msg.getChat();
      
      // S√≥ verifica silenciamento em grupos
      if (!chat.isGroup) {
        return false;
      }

      const senderId = msg.author || msg.from;
      const groupId = chat.id._serialized;

      // Utiliza cache para verifica√ß√£o r√°pida
      const silenced = this.cache.isSilenced(groupId, senderId);
      
      if (silenced) {
        logger.debug(`üîá Usu√°rio silenciado detectado: ${senderId} no grupo ${groupId}`);
      }

      return silenced;

    } catch (error) {
      logger.error(`‚ùå Erro ao verificar silenciamento: ${error.message}`);
      return false; // Em caso de erro, n√£o silencia (fail-safe)
    }
  }

  /**
   * Apaga mensagem de usu√°rio silenciado e registra o evento
   * @param {Message} msg Mensagem a ser apagada
   */
  async deleteSilencedMessage(msg) {
    try {
      const chat = await msg.getChat();
      const senderId = msg.author || msg.from;
      const messagePreview = msg.body?.substring(0, 100) || '[m√≠dia/sem texto]';

      // Log detalhado da mensagem silenciada
      logger.info(
        `üîá MENSAGEM SILENCIADA DETECTADA:\n` +
        `   ‚Ä¢ Grupo: ${chat.name} (${chat.id._serialized})\n` +
        `   ‚Ä¢ Usu√°rio: ${senderId}\n` +
        `   ‚Ä¢ Tipo: ${msg.type}\n` +
        `   ‚Ä¢ Conte√∫do: "${messagePreview}"\n` +
        `   ‚Ä¢ Timestamp: ${getCurrentDateTimeBR()}`
      );

      try {
        // Tenta apagar a mensagem para todos
        await msg.delete(true);
        logger.success(`‚úÖ Mensagem de usu√°rio silenciado apagada com sucesso: ${senderId}`);
        
      } catch (deleteError) {
        logger.error(`‚ùå Erro ao apagar mensagem de usu√°rio silenciado: ${deleteError.message}`);
        
        // Fallback: tentar enviar aviso tempor√°rio (opcional)
        try {
          const warningMsg = await msg.reply("üîá _Mensagem removida - usu√°rio silenciado_");
          
          // Apagar o aviso ap√≥s 3 segundos
          setTimeout(async () => {
            try {
              await warningMsg.delete(true);
            } catch (warningDeleteError) {
              logger.debug("N√£o foi poss√≠vel apagar mensagem de aviso");
            }
          }, 3000);
          
        } catch (replyError) {
          logger.error("Erro ao enviar aviso de silenciamento:", replyError.message);
        }
      }

    } catch (error) {
      logger.error(`‚ùå Erro geral ao processar mensagem silenciada: ${error.message}`);
    }
  }

  /**
   * Lida com a entrada de novos membros em um grupo
   * CORRE√á√ÉO PRINCIPAL: Agora verifica corretamente se boas-vindas est√£o habilitadas
   * @param {Client} client Cliente do WhatsApp
   * @param {object} notification Notifica√ß√£o de entrada no grupo
   */
  async handleGroupJoin(client, notification) {
    try {
      const chatId = notification.chatId;
      const membersCount = notification.recipientIds.length;
      
      logger.info(
        `üë• ENTRADA NO GRUPO DETECTADA:\n` +
        `   ‚Ä¢ Grupo: ${chatId}\n` +
        `   ‚Ä¢ Novos membros: ${membersCount}\n` +
        `   ‚Ä¢ Timestamp: ${getCurrentDateTimeBR()}`
      );
      
      const chat = await client.getChatById(chatId);
      logger.info(`   ‚Ä¢ Nome do grupo: ${chat.name}`);
      
      // ===== VERIFICA√á√ÉO CORRIGIDA DO STATUS DE BOAS-VINDAS =====
      
      const welcomeConfig = getCommandConfig('!welcome');
      
      // Sistema s√≥ est√° ativo se AMBAS as condi√ß√µes forem verdadeiras:
      // 1. Sistema globalmente habilitado E
      // 2. Grupo est√° explicitamente na lista de grupos permitidos
      const isEnabledGlobally = welcomeConfig.enabled === true;
      const allowedGroups = welcomeConfig.allowedGroups || [];
      const isGroupAllowed = allowedGroups.includes(chatId);
      const isWelcomeEnabled = isEnabledGlobally && isGroupAllowed;

      // Log detalhado da verifica√ß√£o para debug
      logger.info(
        `üîç VERIFICA√á√ÉO DE BOAS-VINDAS:\n` +
        `   ‚Ä¢ Sistema global habilitado: ${isEnabledGlobally}\n` +
        `   ‚Ä¢ Grupos permitidos: ${allowedGroups.length} grupo(s)\n` +
        `   ‚Ä¢ Este grupo est√° permitido: ${isGroupAllowed}\n` +
        `   ‚Ä¢ Resultado final: ${isWelcomeEnabled ? '‚úÖ ATIVO' : '‚ùå INATIVO'}`
      );

      if (isWelcomeEnabled) {
        // ===== BOAS-VINDAS ATIVAS - PROCESSAR NOVOS MEMBROS =====
        
        logger.success(`‚úÖ Boas-vindas ativas - processando ${membersCount} novo(s) membro(s)`);
        
        for (let i = 0; i < notification.recipientIds.length; i++) {
          const userId = notification.recipientIds[i];
          
          try {
            // Obter informa√ß√µes do novo membro
            let userName = userId.replace('@c.us', '');
            try {
              const contact = await client.getContactById(userId);
              userName = contact.pushname || userName;
            } catch (contactError) {
              logger.debug(`‚ö†Ô∏è N√£o foi poss√≠vel obter nome do contato ${userId}: ${contactError.message}`);
            }
            
            logger.info(`üëã Processando boas-vindas para: ${userName} (${userId})`);
            
            // Delay entre mensagens para evitar spam (2 segundos por membro)
            if (i > 0) {
              logger.debug(`‚è≥ Aguardando 2 segundos antes do pr√≥ximo membro...`);
              await new Promise(resolve => setTimeout(resolve, 2000));
            }
            
            // Enviar sequ√™ncia completa de boas-vindas
            await sendWelcomeMessage(client, chat, userId, userName);
            
            logger.success(`‚úÖ Boas-vindas enviadas com sucesso para ${userName}`);
            
          } catch (memberError) {
            logger.error(`‚ùå Erro ao processar membro ${userId}: ${memberError.message}`);
            console.error('Stack trace do erro do membro:', memberError);
            
            // Continua para o pr√≥ximo membro mesmo com erro
            continue;
          }
        }
        
        logger.success(`üéâ Processamento de boas-vindas conclu√≠do para ${membersCount} membro(s)`);
        
      } else {
        // ===== BOAS-VINDAS INATIVAS - APENAS LOG =====
        
        logger.info(
          `‚è≠Ô∏è BOAS-VINDAS DESABILITADAS:\n` +
          `   ‚Ä¢ Motivo: ${!isEnabledGlobally ? 'Sistema globalmente desabilitado' : 'Grupo n√£o est√° na lista permitida'}\n` +
          `   ‚Ä¢ A√ß√£o: Pulando ${membersCount} novo(s) membro(s)\n` +
          `   ‚Ä¢ Para ativar: Use "!welcome on" neste grupo`
        );
      }
      
    } catch (error) {
      logger.error(`‚ùå ERRO AO PROCESSAR ENTRADA NO GRUPO: ${error.message}`);
      console.error('Stack trace completo:', error);
      
      // Log adicional para debug
      logger.error(
        `üìã Detalhes do erro:\n` +
        `   ‚Ä¢ Grupo: ${notification.chatId}\n` +
        `   ‚Ä¢ Membros: ${notification.recipientIds?.length || 0}\n` +
        `   ‚Ä¢ Timestamp: ${getCurrentDateTimeBR()}`
      );
    }
  }

  /**
   * Lida com a sa√≠da de membros do grupo (opcional)
   * Pode ser usado para logs ou outras a√ß√µes quando algu√©m sai
   * @param {Client} client Cliente do WhatsApp
   * @param {object} notification Notifica√ß√£o de sa√≠da do grupo
   */
  async handleGroupLeave(client, notification) {
    try {
      const chatId = notification.chatId;
      const leftMembers = notification.recipientIds.length;
      
      logger.info(
        `üëã SA√çDA DO GRUPO DETECTADA:\n` +
        `   ‚Ä¢ Grupo: ${chatId}\n` +
        `   ‚Ä¢ Membros que sa√≠ram: ${leftMembers}\n` +
        `   ‚Ä¢ Timestamp: ${getCurrentDateTimeBR()}`
      );
      
      // Aqui voc√™ pode adicionar l√≥gica adicional para quando algu√©m sai
      // Por exemplo: limpar dados do usu√°rio, logs especiais, etc.
      
    } catch (error) {
      logger.error(`‚ùå Erro ao processar sa√≠da do grupo: ${error.message}`);
    }
  }

  /**
   * Lida com atualiza√ß√µes de informa√ß√µes do grupo
   * @param {Client} client Cliente do WhatsApp
   * @param {object} notification Notifica√ß√£o de atualiza√ß√£o do grupo
   */
  async handleGroupUpdate(client, notification) {
    try {
      const chatId = notification.chatId;
      
      logger.info(
        `üìù ATUALIZA√á√ÉO DO GRUPO DETECTADA:\n` +
        `   ‚Ä¢ Grupo: ${chatId}\n` +
        `   ‚Ä¢ Timestamp: ${getCurrentDateTimeBR()}`
      );
      
      // Atualizar informa√ß√µes do grupo no banco de dados
      const chat = await client.getChatById(chatId);
      const { saveGroupInfo } = require('./client');
      await saveGroupInfo(chat);
      
    } catch (error) {
      logger.error(`‚ùå Erro ao processar atualiza√ß√£o do grupo: ${error.message}`);
    }
  }

  /**
   * M√©todo utilit√°rio para invalidar cache quando necess√°rio
   * @param {string} groupId ID do grupo
   * @param {string} userId ID do usu√°rio
   * @param {string} type Tipo de cache a invalidar ('silenced' ou 'admin')
   */
  invalidateCache(groupId, userId, type = 'silenced') {
    try {
      if (type === 'silenced') {
        this.cache.invalidateSilenced(groupId, userId);
        logger.debug(`üóëÔ∏è Cache de silenciamento invalidado para ${userId} em ${groupId}`);
      } else if (type === 'admin') {
        this.cache.invalidateAdmin(groupId, userId);
        logger.debug(`üóëÔ∏è Cache de admin invalidado para ${userId} em ${groupId}`);
      }
    } catch (error) {
      logger.error(`‚ùå Erro ao invalidar cache: ${error.message}`);
    }
  }

  /**
   * Obt√©m estat√≠sticas do MessageHandler
   * @returns {object} Estat√≠sticas de uso
   */
  getStats() {
    return {
      cacheStats: {
        silencedCacheSize: this.cache.silencedCache.size,
        adminCacheSize: this.cache.adminCache.size,
      },
      timestamp: getCurrentDateTimeBR()
    };
  }
}

module.exports = MessageHandler;
