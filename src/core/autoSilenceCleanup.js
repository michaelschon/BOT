/**
 * Sistema de Limpeza Autom√°tica de Silenciamentos
 * Gerencia a remo√ß√£o autom√°tica de silenciamentos tempor√°rios expirados
 * 
 * @author Volleyball Team
 * @version 2.2 - Sistema Autom√°tico Otimizado
 */

const { statements, db } = require("./db");
const logger = require("../utils/logger");

// Armazenamento dos timeouts ativos para limpeza individual
const activeTimeouts = new Map();

/**
 * Agenda a remo√ß√£o autom√°tica de um silenciamento espec√≠fico
 * @param {string} groupId ID do grupo
 * @param {string} userId ID do usu√°rio
 * @param {Date} expiresAt Data de expira√ß√£o do silenciamento
 * @param {Client} client Cliente do WhatsApp (opcional para notifica√ß√µes)
 */
function scheduleAutoRemoval(groupId, userId, expiresAt, client = null) {
  try {
    const now = new Date();
    const msUntilExpiry = expiresAt.getTime() - now.getTime();
    
    // Se j√° expirou, remover imediatamente
    if (msUntilExpiry <= 0) {
      removeSilencedUser(groupId, userId, client, true);
      return;
    }
    
    // Criar chave √∫nica para identificar o timeout
    const timeoutKey = `${groupId}:${userId}`;
    
    // Cancelar timeout anterior se existir
    if (activeTimeouts.has(timeoutKey)) {
      clearTimeout(activeTimeouts.get(timeoutKey));
    }
    
    // Agendar remo√ß√£o autom√°tica
    const timeoutId = setTimeout(() => {
      removeSilencedUser(groupId, userId, client, true);
      activeTimeouts.delete(timeoutKey);
    }, msUntilExpiry);
    
    // Armazenar timeout para poss√≠vel cancelamento futuro
    activeTimeouts.set(timeoutKey, timeoutId);
    
    logger.info(
      `‚è∞ Agendada remo√ß√£o autom√°tica: ${userId} no grupo ${groupId} ` +
      `em ${Math.ceil(msUntilExpiry / 1000)}s (${expiresAt.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })})`
    );
    
  } catch (error) {
    logger.error("‚ùå Erro ao agendar remo√ß√£o autom√°tica:", error.message);
  }
}

/**
 * Cancela o agendamento de remo√ß√£o autom√°tica de um usu√°rio
 * @param {string} groupId ID do grupo
 * @param {string} userId ID do usu√°rio
 */
function cancelAutoRemoval(groupId, userId) {
  try {
    const timeoutKey = `${groupId}:${userId}`;
    
    if (activeTimeouts.has(timeoutKey)) {
      clearTimeout(activeTimeouts.get(timeoutKey));
      activeTimeouts.delete(timeoutKey);
      
      logger.debug(`‚è∞ Agendamento cancelado: ${userId} no grupo ${groupId}`);
    }
    
  } catch (error) {
    logger.error("‚ùå Erro ao cancelar agendamento:", error.message);
  }
}

/**
 * Remove um usu√°rio silenciado do banco de dados
 * @param {string} groupId ID do grupo
 * @param {string} userId ID do usu√°rio
 * @param {Client} client Cliente do WhatsApp (opcional)
 * @param {boolean} isAutomatic Se a remo√ß√£o √© autom√°tica (expira√ß√£o)
 * @returns {boolean} True se removido com sucesso
 */
function removeSilencedUser(groupId, userId, client = null, isAutomatic = false) {
  try {
    // Obter informa√ß√µes do silenciamento antes de remover
    const silencedInfo = statements.getSilenced.get(groupId, userId);
    
    if (!silencedInfo) {
      logger.debug(`‚ö†Ô∏è Usu√°rio ${userId} n√£o est√° silenciado no grupo ${groupId}`);
      return false;
    }
    
    // Remover do banco de dados
    const result = statements.removeSilenced.run(groupId, userId);
    
    if (result.changes > 0) {
      const tipoRemocao = isAutomatic ? 'autom√°tica' : 'manual';
      const duracao = calculateSilenceDuration(silencedInfo.created_at);
      
      logger.info(
        `üîä Silenciamento removido (${tipoRemocao}): ${userId} no grupo ${groupId} ` +
        `(estava silenciado por ${duracao})`
      );
      
      // Log espec√≠fico para remo√ß√£o autom√°tica (mais detalhado)
      if (isAutomatic) {
        console.log(
          `üîä EXPIRA√á√ÉO AUTOM√ÅTICA - ${userId} foi liberado automaticamente ` +
          `no grupo ${groupId} ap√≥s ${duracao} de silenciamento`
        );
        
        // Opcional: Enviar notifica√ß√£o no grupo sobre a libera√ß√£o autom√°tica
        if (client) {
          sendAutoRemovalNotification(client, groupId, userId, duracao);
        }
      }
      
      return true;
    }
    
    return false;
    
  } catch (error) {
    logger.error("‚ùå Erro ao remover usu√°rio silenciado:", error.message);
    return false;
  }
}

/**
 * Envia notifica√ß√£o no grupo sobre libera√ß√£o autom√°tica (opcional)
 * @param {Client} client Cliente do WhatsApp
 * @param {string} groupId ID do grupo
 * @param {string} userId ID do usu√°rio liberado
 * @param {string} duration Dura√ß√£o que ficou silenciado
 */
async function sendAutoRemovalNotification(client, groupId, userId, duration) {
  try {
    // Obter informa√ß√µes do usu√°rio
    let userName = userId.replace("@c.us", "");
    try {
      const contact = await client.getContactById(userId);
      userName = contact.pushname || userName;
    } catch (contactError) {
      // Usar ID se n√£o conseguir obter o nome
    }
    
    // Enviar notifica√ß√£o discreta
    const notification = 
      `üîä **Silenciamento expirado**\n\n` +
      `üë§ **Usu√°rio:** ${userName}\n` +
      `‚è±Ô∏è **Dura√ß√£o:** ${duration}\n` +
      `‚è∞ **Liberado automaticamente:** ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}\n\n` +
      `‚úÖ O usu√°rio pode voltar a enviar mensagens normalmente.`;
    
    await client.sendMessage(groupId, notification);
    
    logger.debug(`üì¢ Notifica√ß√£o de libera√ß√£o autom√°tica enviada para grupo ${groupId}`);
    
  } catch (error) {
    logger.warn("‚ö†Ô∏è Erro ao enviar notifica√ß√£o de libera√ß√£o autom√°tica:", error.message);
    // N√£o propagar erro - notifica√ß√£o √© opcional
  }
}

/**
 * Calcula dura√ß√£o do silenciamento de forma leg√≠vel
 * @param {string} createdAt Data de cria√ß√£o do silenciamento
 * @returns {string} Dura√ß√£o formatada
 */
function calculateSilenceDuration(createdAt) {
  try {
    const inicio = new Date(createdAt);
    const fim = new Date();
    const diffMs = fim.getTime() - inicio.getTime();
    
    const minutos = Math.floor(diffMs / (1000 * 60));
    const horas = Math.floor(minutos / 60);
    const dias = Math.floor(horas / 24);
    
    if (dias > 0) {
      const horasRestantes = horas % 24;
      return `${dias} dia(s)${horasRestantes > 0 ? ` e ${horasRestantes} hora(s)` : ''}`;
    } else if (horas > 0) {
      const minutosRestantes = minutos % 60;
      return `${horas} hora(s)${minutosRestantes > 0 ? ` e ${minutosRestantes} minuto(s)` : ''}`;
    } else {
      return `${minutos} minuto(s)`;
    }
  } catch (error) {
    return "tempo indeterminado";
  }
}

/**
 * Executa limpeza em lote de todos os silenciamentos expirados
 * Chamada periodicamente como backup e na inicializa√ß√£o
 * @param {Client} client Cliente do WhatsApp (opcional para notifica√ß√µes)
 * @returns {number} N√∫mero de registros removidos
 */
function cleanExpiredSilences(client = null) {
  try {
    // Obter todos os silenciamentos expirados
    const expiredSilences = db.prepare(`
      SELECT grupo_id, usuario_id, created_at
      FROM silenciados 
      WHERE expires_at IS NOT NULL 
      AND expires_at <= datetime('now')
    `).all();
    
    if (expiredSilences.length === 0) {
      return 0;
    }
    
    // Remover em lote
    const result = db.prepare(`
      DELETE FROM silenciados 
      WHERE expires_at IS NOT NULL 
      AND expires_at <= datetime('now')
    `).run();
    
    if (result.changes > 0) {
      logger.info(
        `üßπ Limpeza em lote: ${result.changes} silenciamentos expirados removidos ` +
        `em ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}`
      );
      
      // Log individual para cada usu√°rio liberado
      expiredSilences.forEach(silence => {
        const duracao = calculateSilenceDuration(silence.created_at);
        console.log(
          `üîä LIMPEZA AUTOM√ÅTICA - ${silence.usuario_id} liberado ` +
          `no grupo ${silence.grupo_id} (silenciado por ${duracao})`
        );
      });
      
      // Opcional: Enviar notifica√ß√µes em grupos (se n√£o for muitos)
      if (client && expiredSilences.length <= 5) {
        expiredSilences.forEach(silence => {
          const duracao = calculateSilenceDuration(silence.created_at);
          sendAutoRemovalNotification(client, silence.grupo_id, silence.usuario_id, duracao);
        });
      }
    }
    
    return result.changes;
    
  } catch (error) {
    logger.error("‚ùå Erro na limpeza em lote de silenciamentos:", error.message);
    return 0;
  }
}

/**
 * Inicializa agendamentos para todos os silenciamentos tempor√°rios existentes
 * Chamada na inicializa√ß√£o do bot para recuperar agendamentos perdidos
 * @param {Client} client Cliente do WhatsApp
 */
function initializeAutoRemovals(client) {
  try {
    // Obter todos os silenciamentos tempor√°rios ativos
    const activeSilences = db.prepare(`
      SELECT grupo_id, usuario_id, expires_at
      FROM silenciados 
      WHERE expires_at IS NOT NULL 
      AND expires_at > datetime('now')
      ORDER BY expires_at
    `).all();
    
    if (activeSilences.length === 0) {
      logger.info("‚è∞ Nenhum silenciamento tempor√°rio ativo para agendar");
      return;
    }
    
    // Agendar remo√ß√£o autom√°tica para cada um
    let scheduledCount = 0;
    activeSilences.forEach(silence => {
      try {
        const expiresAt = new Date(silence.expires_at);
        scheduleAutoRemoval(silence.grupo_id, silence.usuario_id, expiresAt, client);
        scheduledCount++;
      } catch (scheduleError) {
        logger.error(
          `‚ùå Erro ao agendar remo√ß√£o para ${silence.usuario_id}: ${scheduleError.message}`
        );
      }
    });
    
    logger.info(
      `‚è∞ Sistema de limpeza autom√°tica inicializado: ${scheduledCount}/${activeSilences.length} ` +
      `agendamentos criados`
    );
    
  } catch (error) {
    logger.error("‚ùå Erro ao inicializar agendamentos autom√°ticos:", error.message);
  }
}

/**
 * Obt√©m estat√≠sticas dos agendamentos ativos
 * @returns {object} Estat√≠sticas dos agendamentos
 */
function getScheduleStats() {
  try {
    const activeCount = activeTimeouts.size;
    
    // Obter contagem do banco para compara√ß√£o
    const dbCount = db.prepare(`
      SELECT COUNT(*) as count
      FROM silenciados 
      WHERE expires_at IS NOT NULL 
      AND expires_at > datetime('now')
    `).get().count;
    
    return {
      agendamentos_ativos: activeCount,
      silenciamentos_temporarios_db: dbCount,
      sincronizado: activeCount === dbCount,
      chaves_ativas: Array.from(activeTimeouts.keys())
    };
    
  } catch (error) {
    logger.error("‚ùå Erro ao obter estat√≠sticas:", error.message);
    return {
      agendamentos_ativos: activeTimeouts.size,
      erro: error.message
    };
  }
}

/**
 * For√ßa a limpeza de todos os agendamentos ativos
 * √ötil para debug ou reinicializa√ß√£o
 */
function clearAllSchedules() {
  try {
    const count = activeTimeouts.size;
    
    activeTimeouts.forEach((timeoutId, key) => {
      clearTimeout(timeoutId);
    });
    
    activeTimeouts.clear();
    
    logger.info(`üßπ Todos os agendamentos limpos: ${count} timeouts cancelados`);
    return count;
    
  } catch (error) {
    logger.error("‚ùå Erro ao limpar agendamentos:", error.message);
    return 0;
  }
}

module.exports = {
  scheduleAutoRemoval,
  cancelAutoRemoval,
  removeSilencedUser,
  cleanExpiredSilences,
  initializeAutoRemovals,
  getScheduleStats,
  clearAllSchedules,
  sendAutoRemovalNotification,
  calculateSilenceDuration
};
