/**
 * Database Core - SQLite3 Otimizado para Alta Performance
 * Sistema de banco de dados do bot de volleyball com configura√ß√µes de performance cr√≠ticas
 * 
 * @author Volleyball Team
 * @version 3.0 - Completamente otimizado e moderno
 */

const Database = require('better-sqlite3');
const path = require('path');
const fs = require('fs');
const logger = require('../utils/logger');

// ===== CONFIGURA√á√ÉO DE CAMINHOS =====
const DATA_DIR = path.join(__dirname, '../../data');
const DB_PATH = path.join(DATA_DIR, 'volleyball.db');

// Garantir que o diret√≥rio existe
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
  logger.info('üìÅ Diret√≥rio de dados criado:', DATA_DIR);
}

// ===== INICIALIZA√á√ÉO DO BANCO =====
logger.info('üóÑÔ∏è Inicializando banco SQLite...');
const db = new Database(DB_PATH);

// ===== CONFIGURA√á√ïES CR√çTICAS DE PERFORMANCE =====
// Estas configura√ß√µes s√£o ESSENCIAIS para velocidade
try {
  logger.info('‚ö° Aplicando configura√ß√µes de alta performance...');
  
  // Write-Ahead Logging - CR√çTICO para performance em produ√ß√£o
  db.pragma('journal_mode = WAL');
  
  // Configura√ß√µes de sincroniza√ß√£o otimizadas
  db.pragma('synchronous = NORMAL');       // Reduz sincroniza√ß√µes de disco
  db.pragma('cache_size = -64000');        // Cache de 64MB em mem√≥ria
  db.pragma('temp_store = MEMORY');        // Tabelas tempor√°rias em RAM
  db.pragma('mmap_size = 268435456');      // Memory-mapped I/O de 256MB
  db.pragma('page_size = 4096');           // Tamanho de p√°gina otimizado
  
  // Configura√ß√µes adicionais de performance
  db.pragma('foreign_keys = ON');          // Integridade referencial
  db.pragma('auto_vacuum = INCREMENTAL');  // Vacuum autom√°tico incremental
  db.pragma('wal_autocheckpoint = 1000');  // Checkpoint autom√°tico
  
  logger.success('‚úÖ Configura√ß√µes de performance aplicadas!');
  
} catch (error) {
  logger.error('‚ùå Erro ao aplicar configura√ß√µes:', error.message);
  throw error;
}

// ===== MIGRATIONS E ESTRUTURA DO BANCO =====

/**
 * Executa as migrations do banco de dados
 * Cria todas as tabelas necess√°rias com estrutura otimizada
 */
function runMigrations() {
  logger.info('üîÑ Executando migrations...');
  
  try {
    // ========== TABELA DE USU√ÅRIOS ==========
    db.exec(`
      CREATE TABLE IF NOT EXISTS usuarios (
        id TEXT PRIMARY KEY,                    -- ID do WhatsApp (ex: 5519999999999@c.us)
        name TEXT,                              -- Nome atual do usu√°rio
        phone TEXT,                             -- N√∫mero do telefone
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // ========== TABELA DE GRUPOS ==========
    db.exec(`
      CREATE TABLE IF NOT EXISTS grupos (
        id TEXT PRIMARY KEY,                    -- ID do grupo (ex: 123456789@g.us)
        name TEXT NOT NULL,                     -- Nome do grupo
        description TEXT,                       -- Descri√ß√£o do grupo
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // ========== TABELA DE ADMINISTRADORES POR GRUPO ==========
    db.exec(`
      CREATE TABLE IF NOT EXISTS admins_grupos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        grupo_id TEXT NOT NULL,                 -- ID do grupo
        usuario_id TEXT NOT NULL,               -- ID do usu√°rio admin
        granted_by TEXT,                        -- Quem concedeu a permiss√£o
        granted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(grupo_id, usuario_id),           -- Evita duplicatas
        FOREIGN KEY (grupo_id) REFERENCES grupos(id) ON DELETE CASCADE,
        FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
      )
    `);
    
    // ========== TABELA DE PERMISS√ïES ESPECIAIS ==========
    db.exec(`
      CREATE TABLE IF NOT EXISTS permissoes_especiais (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        grupo_id TEXT NOT NULL,                 -- ID do grupo
        usuario_id TEXT NOT NULL,               -- ID do usu√°rio
        comando TEXT NOT NULL,                  -- Comando espec√≠fico (ex: !kick)
        permitido BOOLEAN DEFAULT 1,           -- 1 = permitido, 0 = negado
        granted_by TEXT,                        -- Quem concedeu
        granted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        expires_at DATETIME,                    -- Data de expira√ß√£o (opcional)
        UNIQUE(grupo_id, usuario_id, comando),  -- Uma permiss√£o por comando por usu√°rio
        FOREIGN KEY (grupo_id) REFERENCES grupos(id) ON DELETE CASCADE,
        FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
      )
    `);
    
    // ========== TABELA DE APELIDOS ==========
    db.exec(`
      CREATE TABLE IF NOT EXISTS apelidos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        grupo_id TEXT NOT NULL,                 -- ID do grupo
        usuario_id TEXT NOT NULL,               -- ID do usu√°rio
        nickname TEXT NOT NULL,                 -- Apelido do usu√°rio
        set_by TEXT,                            -- Quem definiu o apelido
        locked BOOLEAN DEFAULT 0,              -- Se est√° bloqueado (1) ou n√£o (0)
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(grupo_id, usuario_id),           -- Um apelido por usu√°rio por grupo
        FOREIGN KEY (grupo_id) REFERENCES grupos(id) ON DELETE CASCADE,
        FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
      )
    `);
    
    // ========== TABELA DE SILENCIAMENTO ==========
    db.exec(`
      CREATE TABLE IF NOT EXISTS silenciados (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        grupo_id TEXT NOT NULL,                 -- ID do grupo
        usuario_id TEXT NOT NULL,               -- ID do usu√°rio silenciado
        silenciado_por TEXT,                    -- Quem aplicou o silenciamento
        motivo TEXT,                            -- Motivo do silenciamento
        minutos INTEGER,                        -- Dura√ß√£o em minutos (NULL = permanente)
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        expires_at DATETIME,                    -- Data/hora de expira√ß√£o
        UNIQUE(grupo_id, usuario_id),           -- Um silenciamento por usu√°rio por grupo
        FOREIGN KEY (grupo_id) REFERENCES grupos(id) ON DELETE CASCADE,
        FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
      )
    `);
    
    // ========== TABELA DE AUDITORIA ==========
    db.exec(`
      CREATE TABLE IF NOT EXISTS auditoria (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        usuario_id TEXT NOT NULL,               -- Quem executou
        grupo_id TEXT,                          -- Em que grupo (NULL = privado)
        comando TEXT NOT NULL,                  -- Comando executado
        argumentos TEXT,                        -- Argumentos do comando
        sucesso BOOLEAN DEFAULT 1,             -- Se foi executado com sucesso
        erro TEXT,                              -- Mensagem de erro (se houver)
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE,
        FOREIGN KEY (grupo_id) REFERENCES grupos(id) ON DELETE CASCADE
      )
    `);
    
    logger.success('‚úÖ Todas as tabelas criadas/verificadas com sucesso!');
    
  } catch (error) {
    logger.error('‚ùå Erro durante migrations:', error.message);
    throw error;
  }
}

/**
 * Cria √≠ndices otimizados para performance
 * Estes √≠ndices s√£o CR√çTICOS para velocidade das consultas
 */
function createOptimizedIndexes() {
  logger.info('üöÄ Criando √≠ndices de performance...');
  
  try {
    // ===== √çNDICES PARA USU√ÅRIOS =====
    db.exec(`CREATE INDEX IF NOT EXISTS idx_usuarios_phone ON usuarios(phone)`);
    
    // ===== √çNDICES PARA GRUPOS =====
    db.exec(`CREATE INDEX IF NOT EXISTS idx_grupos_name ON grupos(name)`);
    
    // ===== √çNDICES CR√çTICOS PARA ADMINS =====
    // Este √© o mais importante - usado em TODAS as verifica√ß√µes de permiss√£o
    db.exec(`CREATE INDEX IF NOT EXISTS idx_admins_lookup 
             ON admins_grupos(grupo_id, usuario_id)`);
    db.exec(`CREATE INDEX IF NOT EXISTS idx_admins_granted_at 
             ON admins_grupos(granted_at)`);
    
    // ===== √çNDICES PARA PERMISS√ïES ESPECIAIS =====
    db.exec(`CREATE INDEX IF NOT EXISTS idx_permissions_lookup 
             ON permissoes_especiais(grupo_id, usuario_id, comando)`);
    db.exec(`CREATE INDEX IF NOT EXISTS idx_permissions_expires 
             ON permissoes_especiais(expires_at) 
             WHERE expires_at IS NOT NULL`);
    
    // ===== √çNDICES CR√çTICOS PARA APELIDOS =====
    // Usado constantemente nos comandos de apelido
    db.exec(`CREATE INDEX IF NOT EXISTS idx_apelidos_lookup 
             ON apelidos(grupo_id, usuario_id)`);
    db.exec(`CREATE INDEX IF NOT EXISTS idx_apelidos_nickname_unique 
             ON apelidos(grupo_id, LOWER(nickname))`);
    db.exec(`CREATE INDEX IF NOT EXISTS idx_apelidos_locked 
             ON apelidos(locked) WHERE locked = 1`);
    
    // ===== √çNDICES PARA SILENCIAMENTO =====
    db.exec(`CREATE INDEX IF NOT EXISTS idx_silenciados_active 
             ON silenciados(grupo_id, usuario_id, expires_at)`);
    db.exec(`CREATE INDEX IF NOT EXISTS idx_silenciados_expires 
             ON silenciados(expires_at) 
             WHERE expires_at IS NOT NULL`);
    
    // ===== √çNDICES PARA AUDITORIA =====
    db.exec(`CREATE INDEX IF NOT EXISTS idx_auditoria_usuario_comando 
             ON auditoria(usuario_id, comando)`);
    db.exec(`CREATE INDEX IF NOT EXISTS idx_auditoria_timestamp 
             ON auditoria(timestamp)`);
    db.exec(`CREATE INDEX IF NOT EXISTS idx_auditoria_grupo_timestamp 
             ON auditoria(grupo_id, timestamp)`);
    
    logger.success('‚úÖ √çndices de performance criados!');
    
  } catch (error) {
    logger.warn('‚ö†Ô∏è Alguns √≠ndices j√° existem:', error.message);
  }
}

// ===== PREPARED STATEMENTS OTIMIZADOS =====
// Todas as consultas s√£o pr√©-compiladas para m√°xima performance

const statements = {
  // ========== USU√ÅRIOS ==========
  insertUser: db.prepare(`
    INSERT OR REPLACE INTO usuarios (id, name, phone, updated_at) 
    VALUES (?, ?, ?, CURRENT_TIMESTAMP)
  `),
  
  getUser: db.prepare(`
    SELECT * FROM usuarios WHERE id = ? LIMIT 1
  `),
  
  getUserByPhone: db.prepare(`
    SELECT * FROM usuarios WHERE phone = ? LIMIT 1
  `),
  
  // ========== GRUPOS ==========
  insertGroup: db.prepare(`
    INSERT OR REPLACE INTO grupos (id, name, description, updated_at) 
    VALUES (?, ?, ?, CURRENT_TIMESTAMP)
  `),
  
  getGroup: db.prepare(`
    SELECT * FROM grupos WHERE id = ? LIMIT 1
  `),
  
  // ========== ADMINISTRADORES (CR√çTICO) ==========
  // Esta √© a consulta mais importante - otimizada ao m√°ximo
  isGroupAdmin: db.prepare(`
    SELECT 1 FROM admins_grupos 
    WHERE grupo_id = ? AND usuario_id = ? 
    LIMIT 1
  `),
  
  addGroupAdmin: db.prepare(`
    INSERT OR REPLACE INTO admins_grupos (grupo_id, usuario_id, granted_by) 
    VALUES (?, ?, ?)
  `),
  
  removeGroupAdmin: db.prepare(`
    DELETE FROM admins_grupos 
    WHERE grupo_id = ? AND usuario_id = ?
  `),
  
  getAllGroupAdmins: db.prepare(`
    SELECT ag.usuario_id, ag.granted_by, ag.granted_at, u.name 
    FROM admins_grupos ag
    LEFT JOIN usuarios u ON ag.usuario_id = u.id
    WHERE ag.grupo_id = ?
    ORDER BY 
      CASE WHEN ag.usuario_id = ? THEN 0 ELSE 1 END,
      ag.granted_at ASC
  `),
  
  // ========== PERMISS√ïES ESPECIAIS ==========
  hasSpecialPermission: db.prepare(`
    SELECT permitido FROM permissoes_especiais 
    WHERE grupo_id = ? AND usuario_id = ? AND comando = ? 
    AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)
    LIMIT 1
  `),
  
  grantSpecialPermission: db.prepare(`
    INSERT OR REPLACE INTO permissoes_especiais 
    (grupo_id, usuario_id, comando, permitido, granted_by, expires_at) 
    VALUES (?, ?, ?, ?, ?, ?)
  `),
  
  revokeSpecialPermission: db.prepare(`
    DELETE FROM permissoes_especiais 
    WHERE grupo_id = ? AND usuario_id = ? AND comando = ?
  `),
  
  // ========== APELIDOS (CR√çTICO) ==========
  // Otimizado para o sistema de apelidos mais usado
  getNickname: db.prepare(`
    SELECT nickname, locked, created_at, updated_at, set_by 
    FROM apelidos 
    WHERE grupo_id = ? AND usuario_id = ? 
    LIMIT 1
  `),
  
  setNickname: db.prepare(`
    INSERT OR REPLACE INTO apelidos 
    (grupo_id, usuario_id, nickname, set_by, locked, updated_at) 
    VALUES (?, ?, ?, ?, 
      COALESCE((SELECT locked FROM apelidos WHERE grupo_id = ? AND usuario_id = ?), 0),
      CURRENT_TIMESTAMP
    )
  `),
  
  isNicknameInUse: db.prepare(`
    SELECT 1 FROM apelidos 
    WHERE grupo_id = ? AND LOWER(nickname) = LOWER(?) AND usuario_id != ? 
    LIMIT 1
  `),
  
  lockNickname: db.prepare(`
    UPDATE apelidos 
    SET locked = ?, updated_at = CURRENT_TIMESTAMP 
    WHERE grupo_id = ? AND usuario_id = ?
  `),
  
  getAllNicknamesInGroup: db.prepare(`
    SELECT a.usuario_id, a.nickname, a.locked, a.created_at, a.updated_at,
           u.name as usuario_nome, set_by.name as definido_por_nome
    FROM apelidos a
    LEFT JOIN usuarios u ON a.usuario_id = u.id
    LEFT JOIN usuarios set_by ON a.set_by = set_by.id
    WHERE a.grupo_id = ?
    ORDER BY LOWER(a.nickname) COLLATE NOCASE
  `),
  
  // ========== SILENCIAMENTO ==========
  isSilenced: db.prepare(`
    SELECT 1 FROM silenciados 
    WHERE grupo_id = ? AND usuario_id = ? 
    AND (expires_at IS NULL OR expires_at > datetime('now'))
    LIMIT 1
  `),
  
  addSilenced: db.prepare(`
    INSERT OR REPLACE INTO silenciados 
    (grupo_id, usuario_id, silenciado_por, motivo, minutos, expires_at) 
    VALUES (?, ?, ?, ?, ?, ?)
  `),
  
  removeSilenced: db.prepare(`
    DELETE FROM silenciados 
    WHERE grupo_id = ? AND usuario_id = ?
  `),
  
  getSilenced: db.prepare(`
    SELECT * FROM silenciados 
    WHERE grupo_id = ? AND usuario_id = ? 
    AND (expires_at IS NULL OR expires_at > datetime('now'))
    LIMIT 1
  `),
  
  getAllSilencedInGroup: db.prepare(`
    SELECT s.*, u.name as usuario_nome 
    FROM silenciados s 
    LEFT JOIN usuarios u ON s.usuario_id = u.id 
    WHERE s.grupo_id = ? 
    AND (s.expires_at IS NULL OR s.expires_at > datetime('now'))
    ORDER BY s.created_at DESC
  `),
  
  removeAllSilencedInGroup: db.prepare(`
    DELETE FROM silenciados WHERE grupo_id = ?
  `),
  
  // ========== AUDITORIA ==========
  logCommand: db.prepare(`
    INSERT INTO auditoria 
    (usuario_id, grupo_id, comando, argumentos, sucesso, erro) 
    VALUES (?, ?, ?, ?, ?, ?)
  `),
  
  getCommandHistory: db.prepare(`
    SELECT * FROM auditoria 
    WHERE usuario_id = ? 
    ORDER BY timestamp DESC 
    LIMIT ?
  `),
  
  // ========== LIMPEZA E MANUTEN√á√ÉO ==========
  cleanExpiredSilenced: db.prepare(`
    DELETE FROM silenciados 
    WHERE expires_at IS NOT NULL AND expires_at <= datetime('now')
  `),
  
  cleanOldAuditoria: db.prepare(`
    DELETE FROM auditoria 
    WHERE timestamp < ?
  `)
};

// ===== FUN√á√ïES DE PERFORMANCE E DIAGN√ìSTICO =====

/**
 * Executa teste de performance do banco
 * Verifica se as opera√ß√µes est√£o r√°pidas
 */
function runPerformanceTest() {
  logger.info('üîç Executando teste de performance...');
  
  const start = process.hrtime.bigint();
  
  try {
    // Teste de INSERT
    const testId = `test_${Date.now()}@c.us`;
    statements.insertUser.run(testId, 'Test User', '5519999999999');
    
    // Teste de SELECT
    const user = statements.getUser.get(testId);
    
    // Teste de consulta de admin (mais comum)
    statements.isGroupAdmin.get('test@g.us', testId);
    
    // Cleanup
    db.prepare('DELETE FROM usuarios WHERE id = ?').run(testId);
    
    const end = process.hrtime.bigint();
    const duration = Number(end - start) / 1000000; // ms
    
    logger.success(`‚úÖ Performance: ${duration.toFixed(2)}ms`);
    
    if (duration > 50) {
      logger.warn('‚ö†Ô∏è Performance degradada - verifique sistema');
    } else {
      logger.success('üöÄ Performance excelente!');
    }
    
    return { duration: duration.toFixed(2), status: duration > 50 ? 'slow' : 'fast' };
    
  } catch (error) {
    logger.error('‚ùå Erro no teste:', error.message);
    return { duration: 'error', status: 'error' };
  }
}

/**
 * Configura jobs de limpeza autom√°tica
 * Remove dados antigos para manter performance
 */
function setupAutomaticCleanup() {
  logger.info('üßπ Configurando limpeza autom√°tica...');
  
  // Limpeza de silenciamentos expirados (a cada hora)
  setInterval(() => {
    try {
      const result = statements.cleanExpiredSilenced.run();
      if (result.changes > 0) {
        logger.info(`üßπ ${result.changes} silenciamentos expirados removidos`);
      }
    } catch (error) {
      logger.error('‚ùå Erro na limpeza de silenciamentos:', error.message);
    }
  }, 60 * 60 * 1000); // 1 hora
  
  // Limpeza de auditoria antiga (a cada 24 horas - manter 30 dias)
  setInterval(() => {
    try {
      const cutoff = new Date();
      cutoff.setDate(cutoff.getDate() - 30);
      
      const result = statements.cleanOldAuditoria.run(cutoff.toISOString());
      if (result.changes > 0) {
        logger.info(`üßπ ${result.changes} registros de auditoria antigos removidos`);
      }
    } catch (error) {
      logger.error('‚ùå Erro na limpeza de auditoria:', error.message);
    }
  }, 24 * 60 * 60 * 1000); // 24 horas
  
  // Otimiza√ß√£o autom√°tica do banco (a cada 6 horas)
  setInterval(() => {
    try {
      db.pragma('optimize');
      logger.info('üöÄ Banco otimizado automaticamente');
    } catch (error) {
      logger.error('‚ùå Erro na otimiza√ß√£o:', error.message);
    }
  }, 6 * 60 * 60 * 1000); // 6 horas
}

/**
 * Obt√©m estat√≠sticas do banco
 */
function getDatabaseStats() {
  try {
    const stats = {};
    
    // Contadores de tabelas
    stats.usuarios = db.prepare('SELECT COUNT(*) as count FROM usuarios').get().count;
    stats.grupos = db.prepare('SELECT COUNT(*) as count FROM grupos').get().count;
    stats.admins = db.prepare('SELECT COUNT(*) as count FROM admins_grupos').get().count;
    stats.apelidos = db.prepare('SELECT COUNT(*) as count FROM apelidos').get().count;
    stats.silenciados = db.prepare('SELECT COUNT(*) as count FROM silenciados WHERE expires_at IS NULL OR expires_at > datetime("now")').get().count;
    stats.auditoria = db.prepare('SELECT COUNT(*) as count FROM auditoria').get().count;
    
    // Tamanho do banco
    const size = fs.statSync(DB_PATH).size;
    stats.tamanho = `${(size / 1024 / 1024).toFixed(2)} MB`;
    
    // Performance info
    const pragmas = {
      journal_mode: db.pragma('journal_mode', { simple: true }),
      cache_size: db.pragma('cache_size', { simple: true }),
      synchronous: db.pragma('synchronous', { simple: true })
    };
    stats.config = pragmas;
    
    return stats;
    
  } catch (error) {
    logger.error('‚ùå Erro ao obter estat√≠sticas:', error.message);
    return null;
  }
}

// ===== INICIALIZA√á√ÉO COMPLETA =====

// 1. Executar migrations
runMigrations();

// 2. Criar √≠ndices
createOptimizedIndexes();

// 3. Aplicar otimiza√ß√£o final
try {
  db.pragma('optimize');
  logger.success('‚úÖ Otimiza√ß√£o final aplicada');
} catch (error) {
  logger.warn('‚ö†Ô∏è Otimiza√ß√£o final falhou:', error.message);
}

// 4. Executar teste de performance
setTimeout(() => {
  runPerformanceTest();
}, 1000);

// 5. Configurar limpeza autom√°tica
setupAutomaticCleanup();

logger.success('üéØ Database SQLite completamente otimizado e pronto!');

// ===== EXPORTA√á√ïES =====
module.exports = {
  db,
  statements,
  runPerformanceTest,
  setupAutomaticCleanup,
  getDatabaseStats
};
