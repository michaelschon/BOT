/**
 * Utilit√°rios para normaliza√ß√£o de n√∫meros de telefone - VERS√ÉO CORRIGIDA
 * Focado no padr√£o brasileiro (+55) para WhatsApp
 * CORRE√á√ÉO: L√≥gica aprimorada para diferentes formatos de entrada
 * 
 * @author Volleyball Team & Gemini AI
 * @version 2.1 - Corre√ß√£o de parsing robusto
 */

const logger = require("./logger");

/**
 * Normaliza um n√∫mero de telefone para o formato WhatsApp brasileiro
 * VERS√ÉO CORRIGIDA: Agora lida corretamente com formatos como "+55 19 99999-9999"
 * @param {string} input N√∫mero de telefone em qualquer formato
 * @returns {string|null} N√∫mero normalizado ou null se inv√°lido
 */
function normalizePhone(input) {
  if (!input || typeof input !== 'string') {
    logger.debug("‚ùå Input inv√°lido para normalizePhone:", input);
    return null;
  }
  
  try {
    // Remove todos os caracteres que n√£o s√£o d√≠gitos
    let digits = input.replace(/\D/g, "");
    
    logger.debug(`üîÑ Normalizando telefone: "${input}" -> "${digits}" (${digits.length} d√≠gitos)`);
    
    // ===== CASOS POSS√çVEIS (CORRIGIDOS) =====
    
    // 1. Input muito curto (menos de 8 d√≠gitos) = inv√°lido
    if (digits.length < 8) {
      logger.warn(`‚ö†Ô∏è N√∫mero muito curto: "${input}" -> ${digits.length} d√≠gitos`);
      return null;
    }
    
    // 2. Input muito longo (mais de 13 d√≠gitos) = inv√°lido  
    if (digits.length > 13) {
      logger.warn(`‚ö†Ô∏è N√∫mero muito longo: "${input}" -> ${digits.length} d√≠gitos`);
      return null;
    }
    
    // 3. N√∫mero com 8 d√≠gitos: provavelmente n√∫mero local sem DDD
    // Exemplo: 99999999 -> assumir DDD 19
    if (digits.length === 8) {
      logger.debug(`üîß Assumindo DDD 19 para n√∫mero local: ${digits}`);
      digits = "55199" + digits; // +55 19 9XXXXXXX
    }
    
    // 4. N√∫mero com 9 d√≠gitos: provavelmente n√∫mero local com 9¬∫ d√≠gito mas sem DDD
    // Exemplo: 999999999 -> assumir DDD 19
    else if (digits.length === 9 && digits.startsWith('9')) {
      logger.debug(`üîß Assumindo DDD 19 para celular: ${digits}`);
      digits = "5519" + digits; // +55 19 9XXXXXXXX
    }
    
    // 5. N√∫mero com 10 d√≠gitos: DDD + n√∫mero sem 9¬∫ d√≠gito
    // Exemplo: 1999999999 -> 5519999999999
    else if (digits.length === 10) {
      const ddd = digits.substring(0, 2);
      const numero = digits.substring(2);
      
      // Validar DDD
      if (!isValidBrazilianAreaCode(ddd)) {
        logger.warn(`‚ö†Ô∏è DDD inv√°lido: ${ddd}`);
        return null;
      }
      
      // Adicionar 9¬∫ d√≠gito se n√£o existir
      if (!numero.startsWith('9')) {
        digits = "55" + ddd + "9" + numero;
        logger.debug(`üîß Adicionado 9¬∫ d√≠gito: ${digits}`);
      } else {
        digits = "55" + digits;
        logger.debug(`üîß Adicionado DDI: ${digits}`);
      }
    }
    
    // 6. N√∫mero com 11 d√≠gitos: DDD + 9 + n√∫mero
    // Exemplo: 19999999999 -> 5519999999999
    else if (digits.length === 11) {
      const ddd = digits.substring(0, 2);
      const ninthDigit = digits.charAt(2);
      
      // Validar DDD
      if (!isValidBrazilianAreaCode(ddd)) {
        logger.warn(`‚ö†Ô∏è DDD inv√°lido: ${ddd}`);
        return null;
      }
      
      // Validar 9¬∫ d√≠gito
      if (ninthDigit !== '9') {
        logger.warn(`‚ö†Ô∏è N√∫mero sem 9¬∫ d√≠gito: ${digits}`);
        return null;
      }
      
      digits = "55" + digits; // Adiciona DDI Brasil
      logger.debug(`üîß Adicionado DDI para n√∫mero completo: ${digits}`);
    }
    
    // 7. N√∫mero com 12 d√≠gitos: DDI + DDD + n√∫mero sem 9¬∫ d√≠gito
    // Exemplo: 551999999999 -> 5519999999999
    else if (digits.length === 12 && digits.startsWith("55")) {
      const ddd = digits.substring(2, 4);
      const numero = digits.substring(4);
      
      // Validar DDD
      if (!isValidBrazilianAreaCode(ddd)) {
        logger.warn(`‚ö†Ô∏è DDD inv√°lido: ${ddd}`);
        return null;
      }
      
      // Inserir 9¬∫ d√≠gito
      digits = "55" + ddd + "9" + numero;
      logger.debug(`üîß Adicionado 9¬∫ d√≠gito para n√∫mero com DDI: ${digits}`);
    }
    
    // 8. N√∫mero com 13 d√≠gitos: formato completo
    // Exemplo: 5519999999999 -> 5519999999999
    else if (digits.length === 13 && digits.startsWith("55")) {
      logger.debug(`‚úÖ Formato j√° completo: ${digits}`);
      // J√° est√° correto, apenas validar
    }
    
    // 9. Outros casos = inv√°lidos
    else {
      logger.warn(`‚ö†Ô∏è Formato n√£o reconhecido: "${input}" -> ${digits} (${digits.length} d√≠gitos)`);
      return null;
    }
    
    // ===== VALIDA√á√ïES FINAIS =====
    
    // Deve ter exatamente 13 d√≠gitos
    if (digits.length !== 13) {
      logger.warn(`‚ö†Ô∏è Comprimento final inv√°lido: ${digits} (${digits.length} d√≠gitos)`);
      return null;
    }
    
    // Deve come√ßar com 55 (Brasil)
    if (!digits.startsWith("55")) {
      logger.warn(`‚ö†Ô∏è N√£o √© n√∫mero brasileiro: ${digits}`);
      return null;
    }
    
    // Validar DDD
    const ddd = digits.substring(2, 4);
    if (!isValidBrazilianAreaCode(ddd)) {
      logger.warn(`‚ö†Ô∏è DDD inv√°lido no resultado final: ${ddd}`);
      return null;
    }
    
    // Validar 9¬∫ d√≠gito
    const ninthDigit = digits.charAt(4);
    if (ninthDigit !== '9') {
      logger.warn(`‚ö†Ô∏è N√∫mero final sem 9¬∫ d√≠gito: ${digits}`);
      return null;
    }
    
    // Validar que o n√∫mero n√£o tem d√≠gitos repetidos demais (anti-spam)
    const uniqueDigits = new Set(digits.substring(5)).size;
    if (uniqueDigits < 3) {
      logger.warn(`‚ö†Ô∏è N√∫mero suspeito (poucos d√≠gitos √∫nicos): ${digits}`);
      return null;
    }
    
    const normalizedNumber = digits + "@c.us";
    logger.success(`‚úÖ N√∫mero normalizado com sucesso: "${input}" -> "${normalizedNumber}"`);
    
    return normalizedNumber;
    
  } catch (error) {
    logger.error("‚ùå Erro ao normalizar telefone:", error.message);
    return null;
  }
}

/**
 * Valida se um DDD √© v√°lido no Brasil
 * @param {string} ddd DDD com 2 d√≠gitos
 * @returns {boolean} True se v√°lido
 */
function isValidBrazilianAreaCode(ddd) {
  const dddNum = parseInt(ddd);
  
  // DDDs v√°lidos do Brasil (11-99, exceto alguns que n√£o existem)
  const validAreaCodes = [
    11, 12, 13, 14, 15, 16, 17, 18, 19, // S√£o Paulo
    21, 22, 24,                          // Rio de Janeiro
    27, 28,                              // Esp√≠rito Santo
    31, 32, 33, 34, 35, 37, 38,         // Minas Gerais
    41, 42, 43, 44, 45, 46,             // Paran√°
    47, 48, 49,                          // Santa Catarina
    51, 53, 54, 55,                      // Rio Grande do Sul
    61,                                  // Distrito Federal
    62, 64,                              // Goi√°s
    63,                                  // Tocantins
    65, 66,                              // Mato Grosso
    67,                                  // Mato Grosso do Sul
    68,                                  // Acre
    69,                                  // Rond√¥nia
    71, 73, 74, 75, 77,                 // Bahia
    79,                                  // Sergipe
    81, 87,                              // Pernambuco
    82,                                  // Alagoas
    83,                                  // Para√≠ba
    84,                                  // Rio Grande do Norte
    85, 88,                              // Cear√°
    86, 89,                              // Piau√≠
    91, 93, 94,                          // Par√°
    92, 97,                              // Amazonas
    95,                                  // Roraima
    96,                                  // Amap√°
    98, 99                               // Maranh√£o
  ];
  
  return validAreaCodes.includes(dddNum);
}

/**
 * Normaliza especificamente para formato brasileiro E164
 * Mais restritivo que normalizePhone
 * @param {string} input N√∫mero de telefone
 * @returns {string|null} N√∫mero no formato WhatsApp ou null
 */
function normalizeBrazilE164(input) {
  // Reutiliza a fun√ß√£o principal que j√° foi corrigida
  return normalizePhone(input);
}

/**
 * Extrai informa√ß√µes de um n√∫mero de telefone normalizado
 * @param {string} phoneId ID do telefone no formato WhatsApp
 * @returns {object|null} Informa√ß√µes extra√≠das ou null se inv√°lido
 */
function extractPhoneInfo(phoneId) {
  if (!phoneId || !phoneId.endsWith('@c.us')) {
    return null;
  }
  
  try {
    const digits = phoneId.replace('@c.us', '');
    
    if (digits.length !== 13 || !digits.startsWith('55')) {
      return null;
    }
    
    const countryCode = digits.substring(0, 2);  // 55
    const areaCode = digits.substring(2, 4);     // DDD
    const ninthDigit = digits.substring(4, 5);   // 9
    const number = digits.substring(5);          // Resto do n√∫mero
    
    return {
      full: phoneId,
      digits,
      countryCode,
      areaCode,
      ninthDigit,
      number,
      formatted: `+${countryCode} (${areaCode}) 9${number.substring(0, 4)}-${number.substring(4)}`,
      isValid: countryCode === '55' && ninthDigit === '9'
    };
    
  } catch (error) {
    logger.error("‚ùå Erro ao extrair info do telefone:", error.message);
    return null;
  }
}

/**
 * Formata um n√∫mero para exibi√ß√£o amig√°vel
 * @param {string} phoneId ID do telefone no formato WhatsApp
 * @returns {string} N√∫mero formatado para exibi√ß√£o
 */
function formatPhoneDisplay(phoneId) {
  const info = extractPhoneInfo(phoneId);
  
  if (!info) {
    return phoneId || 'N√∫mero inv√°lido';
  }
  
  return info.formatted;
}

/**
 * Valida se um n√∫mero √© um celular brasileiro v√°lido
 * @param {string} phoneId ID do telefone no formato WhatsApp
 * @returns {boolean} True se v√°lido
 */
function isValidBrazilianCellphone(phoneId) {
  const info = extractPhoneInfo(phoneId);
  return info ? info.isValid : false;
}

/**
 * Converte n√∫mero do WhatsApp para formato internacional
 * @param {string} phoneId ID do telefone no formato WhatsApp
 * @returns {string} N√∫mero no formato internacional (+5519...)
 */
function toInternational(phoneId) {
  const info = extractPhoneInfo(phoneId);
  
  if (!info) {
    return phoneId;
  }
  
  return `+${info.digits}`;
}

/**
 * Mascara um n√∫mero para privacidade
 * Mostra apenas os √∫ltimos 4 d√≠gitos
 * @param {string} phoneId ID do telefone no formato WhatsApp
 * @returns {string} N√∫mero mascarado
 */
function maskPhone(phoneId) {
  const info = extractPhoneInfo(phoneId);
  
  if (!info) {
    return '***';
  }
  
  const lastFour = info.number.slice(-4);
  return `+${info.countryCode} (${info.areaCode}) ****-${lastFour}`;
}

/**
 * Lista de DDDs v√°lidos do Brasil por regi√£o
 */
const BRAZILIAN_AREA_CODES = {
  // Regi√£o Sudeste
  11: 'S√£o Paulo - SP',
  12: 'Vale do Para√≠ba - SP',
  13: 'Baixada Santista - SP',
  14: 'Bauru/Mar√≠lia - SP',
  15: 'Sorocaba - SP',
  16: 'Ribeir√£o Preto - SP',
  17: 'S√£o Jos√© do Rio Preto - SP',
  18: 'Presidente Prudente - SP',
  19: 'Campinas - SP',
  21: 'Rio de Janeiro - RJ',
  22: 'Campos dos Goytacazes - RJ',
  24: 'Petr√≥polis - RJ',
  27: 'Vit√≥ria - ES',
  28: 'Cachoeiro de Itapemirim - ES',
  31: 'Belo Horizonte - MG',
  32: 'Juiz de Fora - MG',
  33: 'Governador Valadares - MG',
  34: 'Uberl√¢ndia - MG',
  35: 'Po√ßos de Caldas - MG',
  37: 'Divin√≥polis - MG',
  38: 'Montes Claros - MG',
  
  // Regi√£o Sul
  41: 'Curitiba - PR',
  42: 'Ponta Grossa - PR',
  43: 'Londrina - PR',
  44: 'Maring√° - PR',
  45: 'Cascavel - PR',
  46: 'Francisco Beltr√£o - PR',
  47: 'Joinville - SC',
  48: 'Florian√≥polis - SC',
  49: 'Chapec√≥ - SC',
  51: 'Porto Alegre - RS',
  53: 'Pelotas - RS',
  54: 'Caxias do Sul - RS',
  55: 'Santa Maria - RS',
  
  // Regi√£o Centro-Oeste
  61: 'Bras√≠lia - DF',
  62: 'Goi√¢nia - GO',
  63: 'Palmas - TO',
  64: 'Rio Verde - GO',
  65: 'Cuiab√° - MT',
  66: 'Rondon√≥polis - MT',
  67: 'Campo Grande - MS',
  
  // Regi√£o Nordeste
  71: 'Salvador - BA',
  73: 'Ilh√©us - BA',
  74: 'Juazeiro - BA',
  75: 'Feira de Santana - BA',
  77: 'Vit√≥ria da Conquista - BA',
  79: 'Aracaju - SE',
  81: 'Recife - PE',
  87: 'Petrolina - PE',
  82: 'Macei√≥ - AL',
  83: 'Jo√£o Pessoa - PB',
  84: 'Natal - RN',
  85: 'Fortaleza - CE',
  88: 'Juazeiro do Norte - CE',
  86: 'Teresina - PI',
  89: 'Picos - PI',
  98: 'S√£o Lu√≠s - MA',
  99: 'Imperatriz - MA',
  
  // Regi√£o Norte
  68: 'Rio Branco - AC',
  96: 'Macap√° - AP',
  92: 'Manaus - AM',
  97: 'Coari - AM',
  91: 'Bel√©m - PA',
  93: 'Santar√©m - PA',
  94: 'Marab√° - PA',
  69: 'Porto Velho - RO',
  95: 'Boa Vista - RR'
};

/**
 * Obt√©m informa√ß√µes da regi√£o de um n√∫mero
 * @param {string} phoneId ID do telefone no formato WhatsApp
 * @returns {object|null} Informa√ß√µes da regi√£o
 */
function getRegionInfo(phoneId) {
  const info = extractPhoneInfo(phoneId);
  
  if (!info) {
    return null;
  }
  
  const areaCodeNum = parseInt(info.areaCode);
  const regionName = BRAZILIAN_AREA_CODES[areaCodeNum];
  
  if (!regionName) {
    return null;
  }
  
  const [city, state] = regionName.split(' - ');
  
  return {
    areaCode: info.areaCode,
    city: city.trim(),
    state: state.trim(),
    region: regionName,
    isValid: true
  };
}

/**
 * Gera n√∫meros de teste para desenvolvimento
 * @param {number} count Quantidade de n√∫meros
 * @returns {Array} Array de n√∫meros de teste
 */
function generateTestNumbers(count = 5) {
  const testNumbers = [];
  const ddds = ['11', '19', '21', '31', '51'];
  
  for (let i = 0; i < count; i++) {
    const ddd = ddds[i % ddds.length];
    const number = Math.floor(Math.random() * 100000000).toString().padStart(8, '0');
    testNumbers.push(`55${ddd}9${number}@c.us`);
  }
  
  return testNumbers;
}

/**
 * Fun√ß√£o para debug: testa v√°rios formatos de entrada
 * @param {string} input N√∫mero de entrada
 * @returns {object} Resultado do teste
 */
function debugPhoneNormalization(input) {
  console.log(`\nüîß DEBUG: Testando normaliza√ß√£o para "${input}"`);
  
  const result = normalizePhone(input);
  const info = result ? extractPhoneInfo(result) : null;
  
  const debugInfo = {
    input,
    output: result,
    success: !!result,
    info,
    formatted: info ? formatPhoneDisplay(result) : null,
    masked: info ? maskPhone(result) : null,
    region: info ? getRegionInfo(result) : null
  };
  
  console.log(`   Input: "${input}"`);
  console.log(`   Output: ${result || 'null'}`);
  console.log(`   Success: ${debugInfo.success}`);
  if (debugInfo.formatted) {
    console.log(`   Formatted: ${debugInfo.formatted}`);
  }
  
  return debugInfo;
}

module.exports = {
  normalizePhone,
  normalizeBrazilE164,
  extractPhoneInfo,
  formatPhoneDisplay,
  isValidBrazilianCellphone,
  toInternational,
  maskPhone,
  getRegionInfo,
  generateTestNumbers,
  isValidBrazilianAreaCode,
  debugPhoneNormalization,
  BRAZILIAN_AREA_CODES
};
