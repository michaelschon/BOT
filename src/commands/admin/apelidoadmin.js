/**
 * Comando para admins definirem apelido de outros usu√°rios
 * Aceita v√°rios formatos de telefone
 * 
 * @author Volleyball Team
 */

const { statements } = require("../../core/db");
const { normalizePhone } = require("../../utils/phone");

module.exports = {
  name: "!apelidoadmin",
  aliases: ["!setapelido", "!definirapelido"],
  description: "Admin define apelido de outro usu√°rio",
  usage: "!apelidoadmin <telefone> <apelido>",
  category: "admin",
  requireAdmin: true,

  async execute(client, msg, args, senderId) {
    try {
      const chat = await msg.getChat();
      
      // S√≥ funciona em grupos
      if (!chat.isGroup) {
        await msg.reply("‚ö†Ô∏è Este comando s√≥ funciona em grupos!");
        return;
      }

      // Validar argumentos
      if (args.length < 2) {
        await msg.reply(
          "‚ö†Ô∏è Uso correto: `!apelidoadmin <telefone> <apelido>`\n\n" +
          "üì± Formatos aceitos:\n" +
          "‚Ä¢ +55 19 9999-9999\n" +
          "‚Ä¢ 551999999999\n" +
          "‚Ä¢ 19 99999999\n" +
          "‚Ä¢ 19 9999-9999\n\n" +
          "Exemplo: `!apelidoadmin 19999999999 Jo√£o`"
        );
        return;
      }

      // Encontrar onde termina o n√∫mero e come√ßa o apelido
      // Estrat√©gia: Tentar normalizar cada combina√ß√£o at√© encontrar uma v√°lida
      let rawPhone = "";
      let novoApelido = "";
      let targetId = null;
      
      // Tenta diferentes combina√ß√µes de argumentos para separar telefone do apelido
      for (let i = 1; i <= args.length - 1; i++) {
        const phoneCandidate = args.slice(0, i).join(" ");
        const nicknameCandidate = args.slice(i).join(" ");
        
        const normalizedPhone = normalizePhone(phoneCandidate);
        if (normalizedPhone) {
          rawPhone = phoneCandidate;
          novoApelido = nicknameCandidate;
          targetId = normalizedPhone;
          break;
        }
      }
      
      const groupId = chat.id._serialized;

      // Se n√£o conseguiu normalizar nenhuma combina√ß√£o
      if (!targetId) {
        await msg.reply(
          `‚ö†Ô∏è N√£o foi poss√≠vel identificar um n√∫mero v√°lido nos argumentos: "${args.join(' ')}"\n\n` +
          "üì± Use um dos formatos:\n" +
          "‚Ä¢ `!apelidoadmin +55 19 9999-9999 Jo√£o`\n" +
          "‚Ä¢ `!apelidoadmin 551999999999 Jo√£o`\n" +
          "‚Ä¢ `!apelidoadmin 19 99999999 Jo√£o`"
        );
        return;
      }

      // Validar apelido
      if (novoApelido.length < 2) {
        await msg.reply("‚ö†Ô∏è O apelido deve ter pelo menos 2 caracteres!");
        return;
      }

      if (novoApelido.length > 30) {
        await msg.reply("‚ö†Ô∏è O apelido n√£o pode ter mais que 30 caracteres!");
        return;
      }

      // Verificar caracteres proibidos
      const caracteresProibidos = /[<>@#&*{}[\]\\]/;
      if (caracteresProibidos.test(novoApelido)) {
        await msg.reply("‚ö†Ô∏è O apelido cont√©m caracteres n√£o permitidos!");
        return;
      }

      if (novoApelido.toLowerCase().startsWith('!')) {
        await msg.reply("‚ö†Ô∏è O apelido n√£o pode come√ßar com '!' (reservado para comandos).");
        return;
      }

      // Verificar se apelido j√° existe
      try {
        const { db } = require("../../core/db");
        const apelidoExistente = db.prepare(`
          SELECT usuario_id FROM apelidos 
          WHERE grupo_id = ? AND LOWER(nickname) = LOWER(?) AND usuario_id != ?
        `).get(groupId, novoApelido, targetId);

        if (apelidoExistente) {
          await msg.reply(
            `‚ö†Ô∏è O apelido "${novoApelido}" j√° est√° sendo usado por outro usu√°rio.\n\n` +
            `üí° Tente: "${novoApelido}2", "${novoApelido}_ADM" ou "${novoApelido}üèê"`
          );
          return;
        }
      } catch (error) {
        console.warn("Erro ao verificar duplica√ß√£o:", error.message);
      }

      // Obter apelido anterior
      const apelidoAnterior = statements.getNickname.get(groupId, targetId);
      
      // Definir novo apelido (admin sempre pode sobrescrever)
      statements.setNickname.run(groupId, targetId, novoApelido, senderId);
      
      // BLOQUEAR APELIDO POR PADR√ÉO quando definido por admin
      statements.lockNickname.run(1, groupId, targetId);

      // Resposta de sucesso
      let resposta = `üëë *Apelido definido pelo admin!*\n\n`;
      
      if (apelidoAnterior && apelidoAnterior.nickname) {
        resposta += `üîÑ **Alterado:** "${apelidoAnterior.nickname}" ‚Üí "${novoApelido}"\n`;
      } else {
        resposta += `‚ú® **Novo apelido:** "${novoApelido}"\n`;
      }
      
      resposta += `üì± **Usu√°rio:** \`${targetId}\`\n`;
      resposta += `üëÆ **Admin respons√°vel:** ${senderId}\n`;
      resposta += `üîí **Status:** Bloqueado para altera√ß√£o (padr√£o)\n\n`;
      resposta += `üèê O usu√°rio agora ser√° conhecido como **${novoApelido}** no grupo!\n\n`;
      resposta += `üí° **Para liberar:** Use \`!liberarapelido ${rawPhone}\``;

      await msg.reply(resposta);

      // Log detalhado
      console.log(
        `üëë Admin ${senderId} definiu apelido "${novoApelido}" ` +
        `para ${targetId} no grupo ${groupId}`
      );

    } catch (error) {
      console.error("Erro no apelidoadmin:", error);
      await msg.reply("‚ùå Erro ao definir apelido via admin.");
    }
  }
};
