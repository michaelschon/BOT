/**
 * Comando para silenciar usu√°rio (apagar mensagens automaticamente)
 * Silencia por tempo determinado ou permanentemente
 * 
 * @author Volleyball Team
 */

const { normalizePhone } = require("../../utils/phone");
const { MASTER_USER_ID } = require("../../config/auth");
const { db } = require("../../core/db");

// Tempo m√°ximo permitido (99999999999 minutos)
const MAX_SILENCE_MINUTES = 99999999999;

module.exports = {
  name: "!silenciar",
  aliases: ["!mute", "!calar"],
  description: "Silencia usu√°rio por tempo determinado ou permanentemente",
  usage: "!silenciar <telefone> [minutos]",
  category: "admin",
  requireAdmin: true,

  async execute(client, msg, args, senderId) {
    try {
      const chat = await msg.getChat();
      
      // S√≥ funciona em grupos
      if (!chat.isGroup) {
        await msg.reply("‚ö†Ô∏è Este comando s√≥ funciona em grupos!");
        return;
      }

      if (args.length < 1) {
        await msg.reply(
          "‚ö†Ô∏è Uso correto: `!silenciar <telefone> [minutos]`\n\n" +
          "üìã **Exemplos:**\n" +
          "‚Ä¢ `!silenciar +55 19 99999-9999 10` - Silenciar por 10 minutos\n" +
          "‚Ä¢ `!silenciar 19999999999 60` - Silenciar por 1 hora\n" +
          "‚Ä¢ `!silenciar 19 99999999` - Silenciar permanentemente\n\n" +
          "‚ö†Ô∏è **Efeito:** Todas as mensagens do usu√°rio ser√£o apagadas automaticamente"
        );
        return;
      }

      // Separar telefone do tempo
      let rawPhone = "";
      let tempoMinutos = null;
      let targetId = null;
      
      // Se h√° 2 ou mais argumentos, √∫ltimo pode ser o tempo
      if (args.length >= 2) {
        const ultimoArg = args[args.length - 1];
        if (/^\d+$/.test(ultimoArg)) {
          // √öltimo argumento √© n√∫mero (tempo)
          tempoMinutos = parseInt(ultimoArg);
          rawPhone = args.slice(0, -1).join(" ");
        } else {
          // Todos os argumentos s√£o parte do telefone
          rawPhone = args.join(" ");
        }
      } else {
        rawPhone = args[0];
      }

      // Normalizar telefone
      targetId = normalizePhone(rawPhone);
      if (!targetId) {
        await msg.reply(
          `‚ö†Ô∏è N√∫mero de telefone inv√°lido: "${rawPhone}"\n\n` +
          "üì± Use um formato v√°lido:\n" +
          "‚Ä¢ +55 19 9999-9999\n" +
          "‚Ä¢ 19999999999"
        );
        return;
      }

      // PROTE√á√ÉO: N√£o pode silenciar o Master
      if (targetId === MASTER_USER_ID) {
        await msg.reply(
          `üõ°Ô∏è **OPERA√á√ÉO BLOQUEADA!**\n\n` +
          `‚ö†Ô∏è **Tentativa de silenciar Master detectada!**\n` +
          `üëë O Master n√£o pode ser silenciado\n` +
          `üîí Esta √© uma prote√ß√£o do sistema\n\n` +
          `üìù **A√ß√£o registrada:** ${senderId} tentou silenciar Master`
        );

        console.warn(
          `üö® TENTATIVA DE SILENCIAR MASTER: ${senderId} tentou silenciar ` +
          `${targetId} no grupo ${chat.id._serialized}`
        );
        return;
      }

      // Validar tempo se fornecido
      if (tempoMinutos !== null) {
        if (tempoMinutos < 1) {
          await msg.reply("‚ö†Ô∏è O tempo deve ser pelo menos 1 minuto!");
          return;
        }
        
        if (tempoMinutos > MAX_SILENCE_MINUTES) {
          tempoMinutos = MAX_SILENCE_MINUTES;
          await msg.reply(
            `‚ö†Ô∏è **Tempo ajustado automaticamente!**\n\n` +
            `üìä **Solicitado:** ${args[args.length - 1]} minutos\n` +
            `üìè **M√°ximo permitido:** ${MAX_SILENCE_MINUTES} minutos\n` +
            `‚úÖ **Tempo aplicado:** ${MAX_SILENCE_MINUTES} minutos\n\n` +
            `üí° Continuando com o tempo m√°ximo...`
          );
        }
      }

      const groupId = chat.id._serialized;
      
      // Verificar se usu√°rio est√° no grupo
      const targetParticipant = chat.participants.find(p => p.id._serialized === targetId);
      if (!targetParticipant) {
        await msg.reply(
          `‚ö†Ô∏è **Usu√°rio n√£o encontrado no grupo!**\n\n` +
          `üì± **N√∫mero:** \`${targetId}\`\n\n` +
          `üí° O usu√°rio precisa estar no grupo para ser silenciado.`
        );
        return;
      }

      try {
        // Calcular data de expira√ß√£o
        let expiresAt = null;
        if (tempoMinutos !== null) {
          expiresAt = new Date(Date.now() + (tempoMinutos * 60 * 1000));
        }

        // Salvar no banco de dados
        this.addSilencedUser(groupId, targetId, senderId, expiresAt, tempoMinutos);

        // Obter nome do usu√°rio
        const contact = await client.getContactById(targetId);
        const userName = contact.pushname || targetId.replace("@c.us", "");

        // Resposta de confirma√ß√£o
        let resposta = `üîá **Usu√°rio silenciado!**\n\n`;
        resposta += `üì± **Usu√°rio:** \`${targetId}\`\n`;
        resposta += `üë§ **Nome:** ${userName}\n`;
        resposta += `üëÆ **Silenciado por:** ${senderId}\n`;
        resposta += `‚è∞ **Data:** ${new Date().toLocaleString('pt-BR')}\n\n`;
        
        if (tempoMinutos !== null) {
          resposta += `‚è±Ô∏è **Dura√ß√£o:** ${tempoMinutos} minuto(s)\n`;
          resposta += `üìÖ **Expira em:** ${expiresAt.toLocaleString('pt-BR')}\n`;
        } else {
          resposta += `‚ôæÔ∏è **Dura√ß√£o:** Permanente\n`;
          resposta += `üìÖ **Expira:** Nunca (at√© ser liberado manualmente)\n`;
        }
        
        resposta += `\nüîá **Efeito:** Todas as mensagens do usu√°rio ser√£o apagadas automaticamente\n`;
        resposta += `üí° Use \`!falar ${rawPhone}\` para liberar quando necess√°rio`;

        await msg.reply(resposta);

        // Log da opera√ß√£o
        console.log(
          `üîá Usu√°rio silenciado: ${senderId} silenciou ${targetId} (${userName}) ` +
          `no grupo ${groupId} por ${tempoMinutos || 'permanente'} minutos`
        );

      } catch (dbError) {
        console.error("Erro ao salvar silenciamento:", dbError);
        await msg.reply("‚ùå Erro ao salvar silenciamento no banco de dados.");
      }

    } catch (error) {
      console.error("Erro no comando silenciar:", error);
      await msg.reply("‚ùå Erro interno no sistema de silenciamento.");
    }
  },

  /**
   * Adiciona usu√°rio silenciado ao banco
   */
  addSilencedUser(groupId, userId, silencedBy, expiresAt, minutes) {
    try {
      // Criar tabela se n√£o existir
      db.prepare(`
        CREATE TABLE IF NOT EXISTS silenciados (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          grupo_id TEXT,
          usuario_id TEXT,
          silenciado_por TEXT,
          minutos INTEGER,
          expires_at DATETIME,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          UNIQUE(grupo_id, usuario_id)
        )
      `).run();

      // Inserir ou atualizar silenciamento
      db.prepare(`
        INSERT OR REPLACE INTO silenciados 
        (grupo_id, usuario_id, silenciado_por, minutos, expires_at)
        VALUES (?, ?, ?, ?, ?)
      `).run(
        groupId, 
        userId, 
        silencedBy, 
        minutes, 
        expiresAt ? expiresAt.toISOString() : null
      );

    } catch (error) {
      console.error("Erro ao adicionar usu√°rio silenciado:", error);
      throw error;
    }
  },

  /**
   * Verifica se usu√°rio est√° silenciado
   */
  isSilenced(groupId, userId) {
    try {
      const result = db.prepare(`
        SELECT * FROM silenciados 
        WHERE grupo_id = ? AND usuario_id = ?
        AND (expires_at IS NULL OR expires_at > CURRENT_TIMESTAMP)
      `).get(groupId, userId);

      return !!result;
    } catch (error) {
      console.error("Erro ao verificar silenciamento:", error);
      return false;
    }
  },

  /**
   * Processa mensagem de usu√°rio silenciado
   */
  async processSilencedMessage(client, msg) {
    try {
      const chat = await msg.getChat();
      if (!chat.isGroup) return false;

      const senderId = msg.author || msg.from;
      const groupId = chat.id._serialized;

      if (this.isSilenced(groupId, senderId)) {
        // Log da mensagem antes de apagar
        console.log(
          `üîá MENSAGEM SILENCIADA - Grupo: ${groupId}, ` +
          `Usu√°rio: ${senderId}, Conte√∫do: "${msg.body}"`
        );

        // Apagar mensagem
        await msg.delete(true); // true = apagar para todos

        return true; // Mensagem foi processada (apagada)
      }

      return false; // Usu√°rio n√£o est√° silenciado
    } catch (error) {
      console.error("Erro ao processar mensagem silenciada:", error);
      return false;
    }
  }
};
