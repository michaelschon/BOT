/**
 * Comando para controlar modo noturno do grupo
 * Restringe mensagens apenas para admins durante hor√°rio espec√≠fico
 * 
 * @author Volleyball Team
 */

const fs = require('fs');
const path = require('path');

// Armazenamento em mem√≥ria dos agendamentos (em produ√ß√£o usar banco de dados)
const scheduledJobs = new Map();

module.exports = {
  name: "!noturno",
  aliases: ["!nightmode", "!modonoturno"],
  description: "Configura modo noturno do grupo (restringe mensagens)",
  usage: "!noturno [on HH:mm HH:mm | off | status]",
  category: "admin",
  requireAdmin: true,

  async execute(client, msg, args, senderId) {
    try {
      const chat = await msg.getChat();
      
      // S√≥ funciona em grupos
      if (!chat.isGroup) {
        await msg.reply("‚ö†Ô∏è Este comando s√≥ funciona em grupos!");
        return;
      }

      // Verificar se bot √© admin do grupo (necess√°rio para alterar configura√ß√µes)
      const botParticipant = chat.participants.find(p => p.id._serialized === client.info.wid._serialized);
      if (!botParticipant || !botParticipant.isAdmin) {
        await msg.reply(
          "‚ö†Ô∏è **Bot precisa ser admin do grupo!**\n\n" +
          "ü§ñ Para usar o modo noturno, o bot deve ter permiss√µes de administrador no WhatsApp\n\n" +
          "üí° **Solu√ß√£o:** Promova o bot a admin do grupo primeiro"
        );
        return;
      }

      const action = args[0]?.toLowerCase();
      const groupId = chat.id._serialized;

      if (!action || action === 'status') {
        await this.showStatus(msg, chat, groupId);
        return;
      }

      if (action === 'off') {
        await this.disableNightMode(msg, chat, groupId);
        return;
      }

      if (action === 'on') {
        if (args.length < 3) {
          await msg.reply(
            "‚ö†Ô∏è Uso correto: `!noturno on HH:mm HH:mm`\n\n" +
            "üìã **Exemplos:**\n" +
            "‚Ä¢ `!noturno on 23:30 05:00` - Das 23h30 √†s 05h00\n" +
            "‚Ä¢ `!noturno on 22:00 06:30` - Das 22h00 √†s 06h30\n" +
            "‚Ä¢ `!noturno on 00:00 07:00` - Da meia-noite √†s 07h00\n\n" +
            "‚è∞ **Formato:** HH:mm (24 horas)"
          );
          return;
        }

        const startTime = args[1];
        const endTime = args[2];

        // Validar formato de hor√°rio
        if (!this.isValidTime(startTime) || !this.isValidTime(endTime)) {
          await msg.reply(
            "‚ö†Ô∏è **Formato de hor√°rio inv√°lido!**\n\n" +
            "üìã **Formato correto:** HH:mm (24 horas)\n" +
            "‚úÖ **Exemplos v√°lidos:** 23:30, 05:00, 22:15\n" +
            "‚ùå **Exemplos inv√°lidos:** 23h30, 5:00, 25:00\n\n" +
            "üí° Use sempre dois d√≠gitos para hora e minuto"
          );
          return;
        }

        await this.enableNightMode(client, msg, chat, groupId, startTime, endTime, senderId);
        return;
      }

      // Comando inv√°lido
      await msg.reply(
        "‚ö†Ô∏è **Op√ß√£o inv√°lida!**\n\n" +
        "üéØ **Op√ß√µes dispon√≠veis:**\n" +
        "‚Ä¢ `!noturno on 23:30 05:00` - Ativar das 23h30 √†s 05h00\n" +
        "‚Ä¢ `!noturno off` - Desativar modo noturno\n" +
        "‚Ä¢ `!noturno status` - Ver configura√ß√£o atual\n\n" +
        "üí° Use `!noturno` sem argumentos para ver o status"
      );

    } catch (error) {
      console.error("Erro no comando noturno:", error);
      await msg.reply("‚ùå Erro interno no sistema de modo noturno.");
    }
  },

  /**
   * Valida formato de hor√°rio HH:mm
   */
  isValidTime(timeStr) {
    const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
    return timeRegex.test(timeStr);
  },

  /**
   * Mostra status atual do modo noturno
   */
  async showStatus(msg, chat, groupId) {
    const config = this.getNightModeConfig(groupId);
    
    let resposta = "üåô **Status do Modo Noturno**\n\n";
    resposta += `üë• **Grupo:** ${chat.name}\n`;
    
    if (config.enabled) {
      resposta += `üìä **Status:** ‚úÖ Ativo\n`;
      resposta += `‚è∞ **Hor√°rio:** ${config.startTime} √†s ${config.endTime}\n`;
      resposta += `üëÆ **Configurado por:** ${config.configuredBy}\n`;
      resposta += `üìÖ **Desde:** ${config.configuredAt}\n\n`;
      
      const isCurrentlyActive = this.isNightModeActiveNow(config.startTime, config.endTime);
      resposta += `üîç **Status atual:** ${isCurrentlyActive ? 'üåô Modo noturno ativo' : '‚òÄÔ∏è Modo normal'}\n\n`;
      
      resposta += `üìã **Durante o modo noturno:**\n`;
      resposta += `‚Ä¢ Apenas admins podem enviar mensagens\n`;
      resposta += `‚Ä¢ Grupo √© automaticamente restrito √†s ${config.startTime}\n`;
      resposta += `‚Ä¢ Liberado novamente √†s ${config.endTime}\n`;
    } else {
      resposta += `üìä **Status:** ‚ùå Inativo\n\n`;
      resposta += `üí° **Para ativar:**\n`;
      resposta += `\`!noturno on 23:30 05:00\`\n`;
    }
    
    resposta += `\nüéØ **Comandos:**\n`;
    resposta += `‚Ä¢ \`!noturno on HH:mm HH:mm\` - Ativar\n`;
    resposta += `‚Ä¢ \`!noturno off\` - Desativar\n`;
    resposta += `‚Ä¢ \`!noturno status\` - Ver este status`;

    await msg.reply(resposta);
  },

  /**
   * Ativa o modo noturno
   */
  async enableNightMode(client, msg, chat, groupId, startTime, endTime, senderId) {
    try {
      // Cancelar agendamentos anteriores se existirem
      this.cancelScheduledJobs(groupId);
      
      // Salvar configura√ß√£o
      const config = {
        enabled: true,
        startTime,
        endTime,
        configuredBy: senderId,
        configuredAt: new Date().toLocaleString('pt-BR'),
        groupId
      };
      
      this.saveNightModeConfig(groupId, config);
      
      // Agendar ativa√ß√£o e desativa√ß√£o
      this.scheduleNightModeJobs(client, groupId, startTime, endTime);
      
      await msg.reply(
        `‚úÖ **Modo noturno ativado!**\n\n` +
        `üë• **Grupo:** ${chat.name}\n` +
        `‚è∞ **Hor√°rio:** ${startTime} √†s ${endTime}\n` +
        `üëÆ **Configurado por:** ${senderId}\n` +
        `üìÖ **Data:** ${new Date().toLocaleString('pt-BR')}\n\n` +
        `üåô **Funcionamento:**\n` +
        `‚Ä¢ √Äs ${startTime}: Grupo restrito apenas para admins\n` +
        `‚Ä¢ √Äs ${endTime}: Grupo liberado para todos\n` +
        `‚Ä¢ Processo autom√°tico di√°rio\n\n` +
        `üí° **O modo noturno entrar√° em vigor a partir de hoje!**`
      );

      console.log(
        `üåô Modo noturno ativado: ${senderId} configurou ${startTime}-${endTime} ` +
        `no grupo ${groupId}`
      );

    } catch (error) {
      console.error("Erro ao ativar modo noturno:", error);
      await msg.reply("‚ùå Erro ao ativar modo noturno. Tente novamente.");
    }
  },

  /**
   * Desativa o modo noturno
   */
  async disableNightMode(msg, chat, groupId) {
    try {
      const config = this.getNightModeConfig(groupId);
      
      if (!config.enabled) {
        await msg.reply(
          `‚ÑπÔ∏è **Modo noturno j√° est√° desativado**\n\n` +
          `üë• **Grupo:** ${chat.name}\n` +
          `üìä **Status:** Inativo\n\n` +
          `üí° Use \`!noturno on HH:mm HH:mm\` para ativar`
        );
        return;
      }
      
      // Cancelar agendamentos
      this.cancelScheduledJobs(groupId);
      
      // Remover configura√ß√£o
      this.removeNightModeConfig(groupId);
      
      // Garantir que grupo esteja liberado
      await this.setGroupMessagingMode(msg.client || msg._client, groupId, false);
      
      await msg.reply(
        `‚ùå **Modo noturno desativado!**\n\n` +
        `üë• **Grupo:** ${chat.name}\n` +
        `üìä **Status:** Inativo\n` +
        `‚è∞ **Era ativo:** ${config.startTime} √†s ${config.endTime}\n\n` +
        `‚úÖ **Resultado:**\n` +
        `‚Ä¢ Agendamentos cancelados\n` +
        `‚Ä¢ Grupo liberado para todos enviarem mensagens\n` +
        `‚Ä¢ Modo noturno n√£o funcionar√° mais\n\n` +
        `üí° Use \`!noturno on HH:mm HH:mm\` para reativar quando necess√°rio`
      );

      console.log(`üåô Modo noturno desativado no grupo ${groupId}`);

    } catch (error) {
      console.error("Erro ao desativar modo noturno:", error);
      await msg.reply("‚ùå Erro ao desativar modo noturno. Tente novamente.");
    }
  },

  /**
   * Agenda os jobs do modo noturno
   */
  scheduleNightModeJobs(client, groupId, startTime, endTime) {
    const now = new Date();
    
    // Calcular pr√≥xima execu√ß√£o para hor√°rio de in√≠cio
    const startDate = this.getNextScheduleTime(startTime);
    const endDate = this.getNextScheduleTime(endTime);
    
    // Se o hor√°rio de fim √© no dia seguinte (ex: 23:30 √†s 05:00)
    if (endTime < startTime) {
      if (endDate <= startDate) {
        endDate.setDate(endDate.getDate() + 1);
      }
    }
    
    // Agendar in√≠cio do modo noturno
    const startTimeout = setTimeout(() => {
      this.activateNightMode(client, groupId);
      // Reagendar para pr√≥ximo dia
      this.scheduleNightModeJobs(client, groupId, startTime, endTime);
    }, startDate.getTime() - now.getTime());
    
    // Agendar fim do modo noturno
    const endTimeout = setTimeout(() => {
      this.deactivateNightMode(client, groupId);
    }, endDate.getTime() - now.getTime());
    
    // Armazenar timeouts para poder cancelar depois
    scheduledJobs.set(groupId, {
      startTimeout,
      endTimeout,
      startTime,
      endTime
    });
    
    console.log(
      `üåô Agendado para ${groupId}: In√≠cio ${startDate.toLocaleString('pt-BR')}, ` +
      `Fim ${endDate.toLocaleString('pt-BR')}`
    );
  },

  /**
   * Calcula pr√≥ximo hor√°rio de execu√ß√£o
   */
  getNextScheduleTime(timeStr) {
    const [hours, minutes] = timeStr.split(':').map(Number);
    const now = new Date();
    const scheduleTime = new Date();
    
    scheduleTime.setHours(hours, minutes, 0, 0);
    
    // Se o hor√°rio j√° passou hoje, agendar para amanh√£
    if (scheduleTime <= now) {
      scheduleTime.setDate(scheduleTime.getDate() + 1);
    }
    
    return scheduleTime;
  },

  /**
   * Verifica se modo noturno est√° ativo agora
   */
  isNightModeActiveNow(startTime, endTime) {
    const now = new Date();
    const currentTime = `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;
    
    if (startTime < endTime) {
      // Mesmo dia (ex: 22:00 √†s 23:59)
      return currentTime >= startTime && currentTime < endTime;
    } else {
      // Atravessa meia-noite (ex: 23:30 √†s 05:00)
      return currentTime >= startTime || currentTime < endTime;
    }
  },

  /**
   * Ativa o modo noturno (restringe grupo)
   */
  async activateNightMode(client, groupId) {
    try {
      await this.setGroupMessagingMode(client, groupId, true);
      
      // Enviar mensagem de modo noturno
      const config = this.getNightModeConfig(groupId);
      let mensagem = `üåô **MODO NOTURNO ATIVADO**\n\n`;
      mensagem += `‚è∞ **Hor√°rio:** ${config.startTime} √†s ${config.endTime}\n`;
      mensagem += `üîá **Grupo restrito:** Apenas admins podem enviar mensagens\n`;
      mensagem += `‚òÄÔ∏è **Volta ao normal:** ${config.endTime}\n\n`;
      mensagem += `üò¥ Boa noite e descansem bem!`;
      
      await client.sendMessage(groupId, mensagem);
      
      // Tentar enviar figurinha de boa noite
      await this.sendNightSticker(client, groupId, 'night');
      
      console.log(`üåô Modo noturno ativado no grupo ${groupId}`);
      
    } catch (error) {
      console.error("Erro ao ativar modo noturno:", error);
    }
  },

  /**
   * Desativa o modo noturno (libera grupo)
   */
  async deactivateNightMode(client, groupId) {
    try {
      await this.setGroupMessagingMode(client, groupId, false);
      
      // Enviar mensagem de bom dia
      let mensagem = `‚òÄÔ∏è **BOM DIA!**\n\n`;
      mensagem += `üîä **Grupo liberado:** Todos podem enviar mensagens novamente\n`;
      mensagem += `üåÖ **Modo noturno finalizado**\n\n`;
      mensagem += `üèê Bom dia, pessoal! Vamos come√ßar mais um dia de volleyball!`;
      
      await client.sendMessage(groupId, mensagem);
      
      // Tentar enviar figurinha de bom dia
      await this.sendNightSticker(client, groupId, 'morning');
      
      console.log(`‚òÄÔ∏è Modo noturno desativado no grupo ${groupId}`);
      
    } catch (error) {
      console.error("Erro ao desativar modo noturno:", error);
    }
  },

  /**
   * Altera configura√ß√£o de mensagens do grupo
   */
  async setGroupMessagingMode(client, groupId, restrictToAdmins) {
    try {
      const chat = await client.getChatById(groupId);
      
      if (restrictToAdmins) {
        // Restringir para apenas admins
        await chat.setMessagesAdminsOnly(true);
      } else {
        // Liberar para todos
        await chat.setMessagesAdminsOnly(false);
      }
      
    } catch (error) {
      console.error("Erro ao alterar configura√ß√£o do grupo:", error);
      throw error;
    }
  },

  /**
   * Envia figurinha do modo noturno (se existir)
   */
  async sendNightSticker(client, groupId, type) {
    try {
      const stickersDir = path.join(__dirname, '..', '..', 'assets', 'stickers');
      const stickerFile = type === 'night' ? 'boa-noite.webp' : 'bom-dia.webp';
      const stickerPath = path.join(stickersDir, stickerFile);
      
      if (fs.existsSync(stickerPath)) {
        const media = fs.readFileSync(stickerPath, { encoding: 'base64' });
        await client.sendMessage(groupId, media, {
          sendMediaAsSticker: true
        });
        console.log(`üé® Figurinha de ${type} enviada para ${groupId}`);
      } else {
        console.log(`‚ÑπÔ∏è Figurinha ${stickerFile} n√£o encontrada, apenas mensagem enviada`);
      }
      
    } catch (error) {
      console.error(`Erro ao enviar figurinha de ${type}:`, error);
      // N√£o propagar erro - figurinha √© opcional
    }
  },

  /**
   * Cancela agendamentos do grupo
   */
  cancelScheduledJobs(groupId) {
    const jobs = scheduledJobs.get(groupId);
    if (jobs) {
      clearTimeout(jobs.startTimeout);
      clearTimeout(jobs.endTimeout);
      scheduledJobs.delete(groupId);
      console.log(`üóëÔ∏è Agendamentos cancelados para ${groupId}`);
    }
  },

  /**
   * Salva configura√ß√£o do modo noturno (em mem√≥ria - em produ√ß√£o usar banco)
   */
  saveNightModeConfig(groupId, config) {
    // Em produ√ß√£o, salvar no banco de dados
    // Por ora, usar arquivo JSON simples
    const configDir = path.join(__dirname, '..', '..', 'data');
    const configFile = path.join(configDir, 'night-mode-configs.json');
    
    let configs = {};
    if (fs.existsSync(configFile)) {
      configs = JSON.parse(fs.readFileSync(configFile, 'utf8'));
    }
    
    configs[groupId] = config;
    
    if (!fs.existsSync(configDir)) {
      fs.mkdirSync(configDir, { recursive: true });
    }
    
    fs.writeFileSync(configFile, JSON.stringify(configs, null, 2));
  },

  /**
   * Obt√©m configura√ß√£o do modo noturno
   */
  getNightModeConfig(groupId) {
    const configFile = path.join(__dirname, '..', '..', 'data', 'night-mode-configs.json');
    
    if (!fs.existsSync(configFile)) {
      return { enabled: false };
    }
    
    const configs = JSON.parse(fs.readFileSync(configFile, 'utf8'));
    return configs[groupId] || { enabled: false };
  },

  /**
   * Remove configura√ß√£o do modo noturno
   */
  removeNightModeConfig(groupId) {
    const configFile = path.join(__dirname, '..', '..', 'data', 'night-mode-configs.json');
    
    if (!fs.existsSync(configFile)) {
      return;
    }
    
    const configs = JSON.parse(fs.readFileSync(configFile, 'utf8'));
    delete configs[groupId];
    
    fs.writeFileSync(configFile, JSON.stringify(configs, null, 2));
  },

  /**
   * Inicializa agendamentos do modo noturno ao iniciar o bot
   */
  initializeSchedules(client) {
    try {
      const configFile = path.join(__dirname, '..', '..', 'data', 'night-mode-configs.json');
      
      if (!fs.existsSync(configFile)) {
        console.log("üåô Nenhuma configura√ß√£o de modo noturno encontrada");
        return;
      }
      
      const configs = JSON.parse(fs.readFileSync(configFile, 'utf8'));
      let count = 0;
      
      for (const [groupId, config] of Object.entries(configs)) {
        if (config.enabled) {
          this.scheduleNightModeJobs(client, groupId, config.startTime, config.endTime);
          count++;
          console.log(`üåô Agendamento restaurado para grupo ${groupId}: ${config.startTime}-${config.endTime}`);
        }
      }
      
      console.log(`üåô ${count} agendamentos de modo noturno inicializados`);
      
    } catch (error) {
      console.error("Erro ao inicializar agendamentos do modo noturno:", error);
    }
  }
};
