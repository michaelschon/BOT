/**
 * Comando para banir usu√°rio do grupo
 * Remove admin se necess√°rio e depois expulsa do grupo
 * 
 * @author Volleyball Team
 */

const { normalizePhone } = require("../../utils/phone");
const { removeGroupAdmin, MASTER_USER_ID } = require("../../config/auth");

module.exports = {
  name: "!ban",
  aliases: ["!kick", "!remover", "!expulsar"],
  description: "Remove usu√°rio do grupo (com motivo opcional)",
  usage: "!ban <telefone> [motivo]",
  category: "admin",
  requireAdmin: true,

  async execute(client, msg, args, senderId) {
    try {
      const chat = await msg.getChat();
      
      // S√≥ funciona em grupos
      if (!chat.isGroup) {
        await msg.reply("‚ö†Ô∏è Este comando s√≥ funciona em grupos!");
        return;
      }

      if (args.length < 1) {
        await msg.reply(
          "‚ö†Ô∏è Uso correto: `!ban <telefone> [motivo]`\n\n" +
          "üì± Formatos aceitos:\n" +
          "‚Ä¢ `!ban +55 19 9999-9999 Spam`\n" +
          "‚Ä¢ `!ban 19999999999 Comportamento inadequado`\n" +
          "‚Ä¢ `!ban 19 99999999` (sem motivo)\n\n" +
          "‚ö†Ô∏è **ATEN√á√ÉO:** Esta a√ß√£o remove permanentemente o usu√°rio do grupo!"
        );
        return;
      }

      // Verificar se o bot tem permiss√£o
      const botParticipant = chat.participants.find(p => p.id._serialized === client.info.wid._serialized);
      if (!botParticipant || !botParticipant.isAdmin) {
        await msg.reply(
          `‚ö†Ô∏è **Bot sem permiss√µes!**\n\n` +
          `ü§ñ O bot precisa ser admin do grupo para remover usu√°rios\n\n` +
          `üí° **Solu√ß√£o:** Pe√ßa para um admin do WhatsApp promover o bot primeiro.`
        );
        return;
      }

      // Separar telefone do motivo
      let rawPhone = "";
      let motivo = "";
      let targetId = null;
      
      // Tentar diferentes combina√ß√µes para separar telefone do motivo
      for (let i = 1; i <= args.length; i++) {
        const phoneCandidate = args.slice(0, i).join(" ");
        const motivoCandidate = args.slice(i).join(" ");
        
        const normalizedPhone = normalizePhone(phoneCandidate);
        if (normalizedPhone) {
          rawPhone = phoneCandidate;
          motivo = motivoCandidate.trim();
          targetId = normalizedPhone;
          break;
        }
      }

      if (!targetId) {
        await msg.reply(
          `‚ö†Ô∏è N√∫mero de telefone inv√°lido: "${args.join(' ')}"\n\n` +
          "üì± Use um formato v√°lido:\n" +
          "‚Ä¢ `!ban +55 19 9999-9999 motivo`\n" +
          "‚Ä¢ `!ban 19999999999 motivo`"
        );
        return;
      }

      // PROTE√á√ÉO: N√£o pode banir o Master
      if (targetId === MASTER_USER_ID) {
        await msg.reply(
          `üõ°Ô∏è **OPERA√á√ÉO BLOQUEADA!**\n\n` +
          `‚ö†Ô∏è **Tentativa de banir Master detectada!**\n` +
          `üëë O Master n√£o pode ser removido do grupo\n` +
          `üîí Esta √© uma prote√ß√£o do sistema\n\n` +
          `üìù **A√ß√£o registrada:** ${senderId} tentou banir Master`
        );

        console.warn(
          `üö® TENTATIVA DE BANIR MASTER: ${senderId} tentou banir ` +
          `${targetId} no grupo ${chat.id._serialized}`
        );
        return;
      }

      // Verificar se o usu√°rio est√° no grupo
      const targetParticipant = chat.participants.find(p => p.id._serialized === targetId);
      if (!targetParticipant) {
        await msg.reply(
          `‚ö†Ô∏è **Usu√°rio n√£o encontrado!**\n\n` +
          `üîç O usu√°rio n√£o est√° na lista de participantes\n` +
          `üì± **ID procurado:** \`${targetId}\`\n\n` +
          `üí° Verifique se o n√∫mero est√° correto e a pessoa est√° no grupo`
        );
        return;
      }

      // Preparar informa√ß√µes do ban
      const isAdmin = targetParticipant.isAdmin;
      const groupId = chat.id._serialized;
      const timestamp = new Date().toLocaleString('pt-BR');
      
      let resposta = `üö´ **Usu√°rio sendo removido do grupo...**\n\n`;
      resposta += `üì± **Usu√°rio:** \`${targetId}\`\n`;
      resposta += `üëÆ **Removido por:** ${senderId}\n`;
      resposta += `‚è∞ **Data:** ${timestamp}\n`;
      
      if (motivo) {
        resposta += `üìù **Motivo:** ${motivo}\n`;
      }
      
      resposta += `\nüîÑ **Processando...**`;

      // Enviar mensagem inicial
      const statusMsg = await msg.reply(resposta);

      try {
        let etapas = [];

        // ETAPA 1: Remover admin do bot se necess√°rio
        const { statements } = require("../../core/db");
        const isBotAdmin = statements.isGroupAdmin.get(groupId, targetId);
        if (isBotAdmin) {
          removeGroupAdmin(groupId, targetId);
          etapas.push("‚úÖ Removido como admin do bot");
        }

        // ETAPA 2: Rebaixar admin do WhatsApp se necess√°rio
        if (isAdmin) {
          try {
            await chat.demoteParticipants([targetId]);
            etapas.push("‚úÖ Removido como admin do WhatsApp");
          } catch (demoteError) {
            console.warn("Erro ao rebaixar admin:", demoteError.message);
            etapas.push("‚ö†Ô∏è N√£o foi poss√≠vel remover admin do WhatsApp");
          }
        }

        // ETAPA 3: Remover do grupo
        await chat.removeParticipants([targetId]);
        etapas.push("‚úÖ Removido do grupo");

        // Resposta final de sucesso
        let respostaFinal = `üö´ **Usu√°rio banido com sucesso!**\n\n`;
        respostaFinal += `üì± **Usu√°rio:** \`${targetId}\`\n`;
        respostaFinal += `üëÆ **Banido por:** ${senderId}\n`;
        respostaFinal += `‚è∞ **Data:** ${timestamp}\n`;
        
        if (motivo) {
          respostaFinal += `üìù **Motivo:** ${motivo}\n`;
        }
        
        respostaFinal += `\nüìã **Etapas executadas:**\n`;
        etapas.forEach(etapa => {
          respostaFinal += `${etapa}\n`;
        });
        
        respostaFinal += `\n‚úÖ **Opera√ß√£o conclu√≠da!** O usu√°rio foi removido permanentemente.`;

        await statusMsg.edit(respostaFinal);

        // Log detalhado
        console.log(
          `üö´ Ban executado: ${senderId} baniu ${targetId} ` +
          `no grupo ${groupId}${motivo ? ` (motivo: ${motivo})` : ''}`
        );

      } catch (removeError) {
        console.error("Erro ao remover usu√°rio:", removeError);
        
        let errorMsg = `‚ùå **Erro ao banir usu√°rio**\n\n`;
        
        const errorMessage = removeError.message || '';
        if (errorMessage.includes('Evaluation failed') || errorMessage.includes('b')) {
          errorMsg += `‚ö†Ô∏è Erro da API do WhatsApp Web\n\n` +
            `üîß **Poss√≠veis solu√ß√µes:**\n` +
            `‚Ä¢ Recarregue a p√°gina do WhatsApp Web\n` +
            `‚Ä¢ Reinicie o bot com \`!restart\`\n` +
            `‚Ä¢ Remova manualmente pelo WhatsApp\n\n` +
            `üí° **Nota:** O usu√°rio pode n√£o ter sido removido completamente.`;
        } else {
          errorMsg += `‚ö†Ô∏è N√£o foi poss√≠vel remover o usu√°rio\n\n` +
            `üîß **Poss√≠veis causas:**\n` +
            `‚Ä¢ Bot perdeu permiss√µes de admin\n` +
            `‚Ä¢ Usu√°rio saiu do grupo antes da remo√ß√£o\n` +
            `‚Ä¢ Erro tempor√°rio do WhatsApp\n\n` +
            `üí° **Solu√ß√£o:** Tente novamente ou remova manualmente.`;
        }
        
        await statusMsg.edit(errorMsg);
      }

    } catch (error) {
      console.error("Erro no comando ban:", error);
      await msg.reply("‚ùå Erro interno no sistema de ban.");
    }
  }
};
