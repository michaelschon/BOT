/**
 * Comando para mostrar informa√ß√µes do contexto
 * Exibe dados do grupo, usu√°rio e bot
 * 
 * @author Volleyball Team
 */

const { checkCooldown, setCooldown } = require("../../config/commands");
const { formatPhoneDisplay, getRegionInfo } = require("../../utils/phone");

module.exports = {
  name: "!dados",
  aliases: ["!info", "!grupo"],
  description: "Mostra informa√ß√µes do grupo, usu√°rio e contexto atual",
  usage: "!dados [--completo]",
  category: "b√°sicos",
  requireAdmin: false,

  /**
   * Executa o comando dados
   * @param {Client} client Cliente do WhatsApp
   * @param {Message} msg Mensagem recebida
   * @param {Array} args Argumentos do comando
   * @param {string} senderId ID de quem enviou
   */
  async execute(client, msg, args, senderId) {
    try {
      // Verifica cooldown
      const cooldownLeft = checkCooldown(senderId, "!dados");
      if (cooldownLeft > 0) {
        await msg.reply(`‚è∞ Aguarde ${cooldownLeft}s antes de usar este comando novamente.`);
        return;
      }

      const chat = await msg.getChat();
      const contact = await msg.getContact();
      const showComplete = args.includes("--completo") || args.includes("-c");

      let response = "üìã *Informa√ß√µes do Contexto*\n\n";

      // ========== INFORMA√á√ïES DO USU√ÅRIO ==========
      response += "üë§ *Voc√™:*\n";
      response += `‚Ä¢ ID: \`${senderId}\`\n`;
      response += `‚Ä¢ Nome: ${contact.pushname || 'N√£o definido'}\n`;
      response += `‚Ä¢ Telefone: ${formatPhoneDisplay(senderId)}\n`;

      if (showComplete) {
        const regionInfo = getRegionInfo(senderId);
        if (regionInfo) {
          response += `‚Ä¢ Regi√£o: ${regionInfo.city} - ${regionInfo.state}\n`;
        }
        response += `‚Ä¢ √â contato: ${contact.isMe ? 'Bot' : (contact.isMyContact ? 'Sim' : 'N√£o')}\n`;
      }

      response += "\n";

      // ========== INFORMA√á√ïES DO CHAT ==========
      if (chat.isGroup) {
        response += "üë• *Grupo:*\n";
        response += `‚Ä¢ Nome: ${chat.name}\n`;
        response += `‚Ä¢ ID: \`${chat.id._serialized}\`\n`;
        response += `‚Ä¢ Participantes: ${chat.participants?.length || 'N/A'}\n`;

        if (showComplete) {
          response += `‚Ä¢ Criado em: ${chat.createdAt ? new Date(chat.createdAt * 1000).toLocaleDateString('pt-BR') : 'N/A'}\n`;
          response += `‚Ä¢ Descri√ß√£o: ${chat.description || 'Sem descri√ß√£o'}\n`;
          
          // Informa√ß√µes de admin do grupo
          if (chat.participants) {
            const admins = chat.participants.filter(p => p.isAdmin);
            response += `‚Ä¢ Admins do grupo: ${admins.length}\n`;
          }
        }
      } else {
        response += "üí¨ *Conversa Privada*\n";
        response += `‚Ä¢ Chat ID: \`${chat.id._serialized}\`\n`;
      }

      response += "\n";

      // ========== INFORMA√á√ïES DO BOT ==========
      if (showComplete) {
        response += "ü§ñ *Bot:*\n";
        response += `‚Ä¢ Status: Online ‚úÖ\n`;
        response += `‚Ä¢ Hora atual: ${new Date().toLocaleString('pt-BR')}\n`;
        
        try {
          const botInfo = client.info;
          if (botInfo) {
            response += `‚Ä¢ Bot ID: \`${botInfo.wid._serialized}\`\n`;
            response += `‚Ä¢ Plataforma: ${botInfo.platform || 'N/A'}\n`;
            response += `‚Ä¢ Vers√£o WA: ${botInfo.phone?.wa_version || 'N/A'}\n`;
          }
        } catch (e) {
          response += `‚Ä¢ Informa√ß√µes t√©cnicas: N√£o dispon√≠veis\n`;
        }
      }

      // ========== INFORMA√á√ïES DA MENSAGEM ==========
      if (showComplete) {
        response += "\nüì® *Mensagem:*\n";
        response += `‚Ä¢ Timestamp: ${new Date(msg.timestamp * 1000).toLocaleString('pt-BR')}\n`;
        response += `‚Ä¢ Tipo: ${msg.type}\n`;
        response += `‚Ä¢ De mim: ${msg.fromMe ? 'Sim' : 'N√£o'}\n`;
        
        if (chat.isGroup) {
          response += `‚Ä¢ Author: \`${msg.author}\`\n`;
          response += `‚Ä¢ From: \`${msg.from}\`\n`;
        }
      }

      await msg.reply(response);

      // Registra cooldown
      setCooldown(senderId, "!dados");

    } catch (error) {
      console.error("Erro no comando dados:", error);
      await msg.reply("‚ùå Erro ao obter informa√ß√µes do contexto.");
    }
  }
};
