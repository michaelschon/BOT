// ===== src/commands/debug/ultimate.js =====
/**
 * Diagn√≥stico FINAL para resolver o problema de uma vez por todas
 * Identifica exatamente onde est√° a falha na comunica√ß√£o INSERT/SELECT
 * 
 * @author Volleyball Team
 * @version 1.0 - Solu√ß√£o definitiva
 */

const { db, statements } = require("../../core/db");
const logger = require("../../utils/logger");

module.exports = {
  name: "!ultimate",
  aliases: ["!final", "!solver"],
  description: "Diagn√≥stico final e corre√ß√£o definitiva (master only)",
  usage: "!ultimate",
  category: "debug",
  requireAdmin: true,

  async execute(client, msg, args, senderId) {
    try {
      // Apenas master
      if (senderId !== '5519999222004@c.us') {
        await msg.reply("‚ùå Comando restrito ao master.");
        return;
      }

      const chat = await msg.getChat();
      const groupId = chat.isGroup ? chat.id._serialized : null;
      
      if (!groupId) {
        await msg.reply("‚ö†Ô∏è Este comando s√≥ funciona em grupos!");
        return;
      }

      let resposta = "üî¨ **DIAGN√ìSTICO FINAL - ULTIMATE DEBUG**\n\n";
      
      // ===== PASSO 1: Estado atual =====
      resposta += `üéØ **PASSO 1: Estado atual**\n`;
      resposta += `üì± Group ID: \`${groupId}\`\n`;
      resposta += `üë§ User ID: \`${senderId}\`\n\n`;
      
      // ===== PASSO 2: Verificar se dados est√£o inseridos =====
      resposta += `üîç **PASSO 2: Verificando dados no banco**\n`;
      
      const dadosRaw = db.prepare(`
        SELECT rowid, * FROM apelidos 
        WHERE grupo_id = ? AND usuario_id = ?
      `).all(groupId, senderId);
      
      if (dadosRaw.length === 0) {
        resposta += `‚ùå NENHUM dado encontrado\n`;
        resposta += `üîß Inserindo dados de teste...\n`;
        
        // Inserir dados de teste
        db.prepare(`
          INSERT INTO apelidos 
          (grupo_id, usuario_id, nickname, set_by, locked, created_at, updated_at) 
          VALUES (?, ?, ?, ?, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        `).run(groupId, senderId, "UltimateTest", senderId);
        
        resposta += `‚úÖ Dados de teste inseridos\n`;
        
        // Verificar novamente
        const dadosAposInsert = db.prepare(`
          SELECT rowid, * FROM apelidos 
          WHERE grupo_id = ? AND usuario_id = ?
        `).get(groupId, senderId);
        
        if (dadosAposInsert) {
          resposta += `‚úÖ Confirmado: dados inseridos (rowid: ${dadosAposInsert.rowid})\n`;
        } else {
          resposta += `‚ùå FALHA: dados n√£o foram inseridos!\n`;
        }
      } else {
        resposta += `‚úÖ Encontrados ${dadosRaw.length} registros:\n`;
        dadosRaw.forEach((dado, index) => {
          resposta += `${index + 1}. rowid:${dado.rowid} - "${dado.nickname}" (${dado.locked ? 'bloqueado' : 'livre'})\n`;
        });
      }
      
      // ===== PASSO 3: Testar prepared statements um por um =====
      resposta += `\nüß™ **PASSO 3: Testando prepared statements**\n`;
      
      // 3A. Testar getNickname atual
      try {
        const resultGetNickname = statements.getNickname.get(groupId, senderId);
        if (resultGetNickname) {
          resposta += `‚úÖ statements.getNickname: "${resultGetNickname.nickname}"\n`;
        } else {
          resposta += `‚ùå statements.getNickname: NULL\n`;
        }
      } catch (error) {
        resposta += `‚ùå statements.getNickname: ERRO - ${error.message}\n`;
      }
      
      // 3B. Criar novo statement identico
      try {
        const novoGetNickname = db.prepare(`
          SELECT nickname, locked, created_at, updated_at, set_by 
          FROM apelidos 
          WHERE grupo_id = ? AND usuario_id = ?
        `);
        
        const resultNovo = novoGetNickname.get(groupId, senderId);
        if (resultNovo) {
          resposta += `‚úÖ Novo statement: "${resultNovo.nickname}"\n`;
        } else {
          resposta += `‚ùå Novo statement: NULL\n`;
        }
      } catch (error) {
        resposta += `‚ùå Novo statement: ERRO - ${error.message}\n`;
      }
      
      // 3C. Statement ainda mais simples
      try {
        const superSimples = db.prepare(`SELECT nickname FROM apelidos WHERE grupo_id = ? AND usuario_id = ?`);
        const resultSimples = superSimples.get(groupId, senderId);
        if (resultSimples) {
          resposta += `‚úÖ Super simples: "${resultSimples.nickname}"\n`;
        } else {
          resposta += `‚ùå Super simples: NULL\n`;
        }
      } catch (error) {
        resposta += `‚ùå Super simples: ERRO - ${error.message}\n`;
      }
      
      // ===== PASSO 4: Verificar par√¢metros exatos =====
      resposta += `\nüîç **PASSO 4: Verificando par√¢metros**\n`;
      
      // Verificar se os par√¢metros est√£o corretos
      const debugParams = db.prepare(`
        SELECT 
          CASE WHEN grupo_id = ? THEN 'OK' ELSE 'FALHA' END as grupo_match,
          CASE WHEN usuario_id = ? THEN 'OK' ELSE 'FALHA' END as usuario_match,
          grupo_id, usuario_id, nickname
        FROM apelidos 
        WHERE rowid = (SELECT MAX(rowid) FROM apelidos)
      `).get(groupId, senderId);
      
      if (debugParams) {
        resposta += `üìã **√öltimo registro inserido:**\n`;
        resposta += `‚Ä¢ Grupo match: ${debugParams.grupo_match}\n`;
        resposta += `‚Ä¢ Usu√°rio match: ${debugParams.usuario_match}\n`;
        resposta += `‚Ä¢ Grupo no banco: \`${debugParams.grupo_id}\`\n`;
        resposta += `‚Ä¢ Usu√°rio no banco: \`${debugParams.usuario_id}\`\n`;
        resposta += `‚Ä¢ Nickname: "${debugParams.nickname}"\n`;
        
        if (debugParams.grupo_match === 'FALHA') {
          resposta += `‚ö†Ô∏è **PROBLEMA ENCONTRADO: Group ID n√£o confere!**\n`;
        }
        
        if (debugParams.usuario_match === 'FALHA') {
          resposta += `‚ö†Ô∏è **PROBLEMA ENCONTRADO: User ID n√£o confere!**\n`;
        }
      }
      
      // ===== PASSO 5: Corrigir statements definitivamente =====
      resposta += `\nüîß **PASSO 5: Aplicando corre√ß√£o definitiva**\n`;
      
      try {
        // Sobrescrever statements com vers√µes que FUNCIONAM
        const dbModule = require("../../core/db");
        
        // Statement ultra-simples que sabemos que funciona
        const statementFuncional = db.prepare(`
          SELECT nickname, locked, created_at, updated_at, set_by 
          FROM apelidos 
          WHERE grupo_id = ? AND usuario_id = ?
          LIMIT 1
        `);
        
        // Testar antes de substituir
        const testeAntes = statementFuncional.get(groupId, senderId);
        
        if (testeAntes) {
          // Funciona - substituir
          dbModule.statements.getNickname = statementFuncional;
          resposta += `‚úÖ Statement substitu√≠do e funcionando\n`;
          
          // Testar ap√≥s substitui√ß√£o
          const testeDepois = dbModule.statements.getNickname.get(groupId, senderId);
          if (testeDepois) {
            resposta += `‚úÖ Teste p√≥s-substitui√ß√£o: "${testeDepois.nickname}"\n`;
          } else {
            resposta += `‚ùå Teste p√≥s-substitui√ß√£o: FALHOU\n`;
          }
        } else {
          resposta += `‚ùå Statement funcional tamb√©m n√£o funciona!\n`;
          resposta += `üîç H√° algo fundamentalmente errado...\n`;
        }
        
      } catch (fixError) {
        resposta += `‚ùå Erro na corre√ß√£o: ${fixError.message}\n`;
      }
      
      // ===== PASSO 6: Teste final =====
      resposta += `\nüéØ **PASSO 6: Teste final**\n`;
      
      try {
        const dbModule = require("../../core/db");
        const testeFinal = dbModule.statements.getNickname.get(groupId, senderId);
        
        if (testeFinal) {
          resposta += `üéâ **SUCESSO! Statement corrigido e funcionando!**\n`;
          resposta += `‚úÖ Resultado: "${testeFinal.nickname}"\n`;
          resposta += `üí° Teste agora: \`!nick\`\n`;
        } else {
          resposta += `‚ùå **FALHA: Problema persiste**\n`;
          resposta += `üîç Necess√°ria investiga√ß√£o mais profunda\n`;
          
          // √öltimo recurso - verificar schema da tabela
          const schema = db.prepare(`PRAGMA table_info(apelidos)`).all();
          resposta += `\nüìã **Schema da tabela:**\n`;
          schema.forEach(col => {
            resposta += `‚Ä¢ ${col.name}: ${col.type} (${col.notnull ? 'NOT NULL' : 'NULLABLE'})\n`;
          });
        }
        
      } catch (finalError) {
        resposta += `‚ùå Erro no teste final: ${finalError.message}\n`;
      }
      
      await msg.reply(resposta);
      
    } catch (error) {
      logger.error("‚ùå Erro no comando ultimate:", error.message);
      await msg.reply(`‚ùå Erro no diagn√≥stico: ${error.message}`);
    }
  }
};
