/**
 * Comando para resetar completamente o sistema de apelidos
 * Remove todos os apelidos e recria estrutura do zero
 * 
 * @author Volleyball Team
 * @version 1.0 - Reset completo e seguro
 */

const { db } = require("../../core/db");
const logger = require("../../utils/logger");

module.exports = {
  name: "!resetapelidos",
  aliases: ["!limparapelidos", "!reset", "!clearapelidos"],
  description: "Reseta sistema de apelidos completamente (master only)",
  usage: "!resetapelidos [confirm] [--all]",
  category: "admin",
  requireAdmin: true,

  /**
   * Executa o comando resetapelidos
   * @param {Client} client Cliente do WhatsApp
   * @param {Message} msg Mensagem recebida
   * @param {Array} args Argumentos do comando
   * @param {string} senderId ID de quem enviou
   */
  async execute(client, msg, args, senderId) {
    try {
      // Apenas master pode usar este comando
      if (senderId !== '5519999222004@c.us') {
        await msg.reply("‚ùå Comando restrito ao usu√°rio master.");
        return;
      }

      const chat = await msg.getChat();
      const groupId = chat.isGroup ? chat.id._serialized : null;
      const resetAll = args.includes("--all") || args.includes("-a");

      // Verificar confirma√ß√£o
      if (!args.includes("confirm")) {
        let warningMsg = "‚ö†Ô∏è **ATEN√á√ÉO: Comando destrutivo!**\n\n";
        
        if (resetAll) {
          warningMsg += "üóëÔ∏è Isso vai deletar **TODOS os apelidos** de **TODOS os grupos** do banco.\n\n";
          warningMsg += "üí• **OPERA√á√ÉO IRREVERS√çVEL!**\n\n";
          warningMsg += "üìä Para confirmar o reset completo: `!resetapelidos confirm --all`";
        } else if (groupId) {
          warningMsg += `üóëÔ∏è Isso vai deletar **todos os apelidos** do grupo atual.\n\n`;
          warningMsg += `üë• **Grupo:** ${chat.name}\n`;
          warningMsg += `üÜî **ID:** \`${groupId}\`\n\n`;
          warningMsg += "üìä Para confirmar: `!resetapelidos confirm`\n";
          warningMsg += "üìä Para resetar TUDO: `!resetapelidos confirm --all`";
        } else {
          warningMsg += "‚ö†Ô∏è Execute este comando em um grupo ou use `--all` para resetar tudo.\n\n";
          warningMsg += "üìä Para resetar tudo: `!resetapelidos confirm --all`";
        }
        
        await msg.reply(warningMsg);
        return;
      }

      let resposta = "üóëÔ∏è **RESETANDO SISTEMA DE APELIDOS**\n\n";
      
      try {
        if (resetAll) {
          // ===== RESET COMPLETO DE TODOS OS GRUPOS =====
          resposta += "üí• **RESET COMPLETO - TODOS OS GRUPOS**\n\n";
          
          // Obter estat√≠sticas antes da limpeza
          const statsAntes = {
            totalApelidos: db.prepare("SELECT COUNT(*) as count FROM apelidos").get().count,
            totalGrupos: db.prepare("SELECT COUNT(DISTINCT grupo_id) as count FROM apelidos").get().count,
            totalUsuarios: db.prepare("SELECT COUNT(DISTINCT usuario_id) as count FROM apelidos").get().count
          };
          
          resposta += `üìä **Estat√≠sticas atuais:**\n`;
          resposta += `‚Ä¢ Total de apelidos: ${statsAntes.totalApelidos}\n`;
          resposta += `‚Ä¢ Grupos com apelidos: ${statsAntes.totalGrupos}\n`;
          resposta += `‚Ä¢ Usu√°rios com apelidos: ${statsAntes.totalUsuarios}\n\n`;
          
          // Listar grupos que ser√£o afetados
          const gruposAfetados = db.prepare(`
            SELECT g.name, g.id, COUNT(a.usuario_id) as total_apelidos
            FROM apelidos a
            LEFT JOIN grupos g ON a.grupo_id = g.id
            GROUP BY a.grupo_id
            ORDER BY total_apelidos DESC
          `).all();
          
          if (gruposAfetados.length > 0) {
            resposta += `üéØ **Grupos que ser√£o afetados:**\n`;
            gruposAfetados.forEach((grupo, index) => {
              resposta += `${index + 1}. ${grupo.name || 'Sem nome'} (${grupo.total_apelidos} apelidos)\n`;
            });
            resposta += `\n`;
          }
          
          // Executar limpeza completa
          const resultadoDelete = db.prepare("DELETE FROM apelidos").run();
          resposta += `‚úÖ **${resultadoDelete.changes} apelidos removidos de TODOS os grupos**\n\n`;
          
        } else if (groupId) {
          // ===== RESET APENAS DO GRUPO ATUAL =====
          resposta += `üéØ **RESET DO GRUPO ATUAL**\n\n`;
          resposta += `üë• **Grupo:** ${chat.name}\n`;
          resposta += `üÜî **ID:** \`${groupId}\`\n\n`;
          
          // Obter apelidos do grupo antes da limpeza
          const apelidosGrupo = db.prepare(`
            SELECT usuario_id, nickname, locked, created_at
            FROM apelidos 
            WHERE grupo_id = ?
            ORDER BY created_at DESC
          `).all(groupId);
          
          if (apelidosGrupo.length === 0) {
            resposta += `‚ÑπÔ∏è **Nenhum apelido encontrado neste grupo.**\n`;
            await msg.reply(resposta);
            return;
          }
          
          resposta += `üìä **Apelidos que ser√£o removidos:**\n`;
          apelidosGrupo.forEach((apelido, index) => {
            const numero = apelido.usuario_id.replace('@c.us', '');
            const status = apelido.locked ? 'üîí' : 'üîì';
            const data = new Date(apelido.created_at).toLocaleDateString('pt-BR');
            
            resposta += `${index + 1}. ${status} **"${apelido.nickname}"** (${numero}) - ${data}\n`;
          });
          resposta += `\n`;
          
          // Executar limpeza do grupo
          const resultadoDelete = db.prepare("DELETE FROM apelidos WHERE grupo_id = ?").run(groupId);
          resposta += `‚úÖ **${resultadoDelete.changes} apelidos removidos do grupo atual**\n\n`;
          
        } else {
          resposta += `‚ùå **Erro:** N√£o foi poss√≠vel determinar o escopo do reset.\n`;
          await msg.reply(resposta);
          return;
        }
        
        // ===== OTIMIZA√á√ÉO P√ìS-LIMPEZA =====
        resposta += `üîß **Otimizando banco de dados...**\n`;
        
        try {
          // Vacuum para recuperar espa√ßo
          db.prepare("VACUUM").run();
          resposta += `‚úÖ Espa√ßo em disco recuperado\n`;
          
          // Recriar √≠ndices se necess√°rio
          db.prepare(`
            CREATE INDEX IF NOT EXISTS idx_apelidos_grupo_usuario ON apelidos(grupo_id, usuario_id)
          `).run();
          
          db.prepare(`
            CREATE INDEX IF NOT EXISTS idx_apelidos_nickname_lookup ON apelidos(grupo_id, LOWER(nickname))
          `).run();
          
          resposta += `‚úÖ √çndices otimizados\n`;
          
          // Otimiza√ß√£o geral
          db.pragma('optimize');
          resposta += `‚úÖ Banco otimizado\n\n`;
          
        } catch (optimizeError) {
          resposta += `‚ö†Ô∏è Erro na otimiza√ß√£o: ${optimizeError.message}\n\n`;
        }
        
        // ===== ESTAT√çSTICAS FINAIS =====
        const statsFinais = {
          totalApelidos: db.prepare("SELECT COUNT(*) as count FROM apelidos").get().count,
          totalUsuarios: db.prepare("SELECT COUNT(*) as count FROM usuarios").get().count,
          totalGrupos: db.prepare("SELECT COUNT(*) as count FROM grupos").get().count
        };
        
        resposta += `üìä **Estado final do banco:**\n`;
        resposta += `‚Ä¢ Apelidos restantes: ${statsFinais.totalApelidos}\n`;
        resposta += `‚Ä¢ Usu√°rios cadastrados: ${statsFinais.totalUsuarios}\n`;
        resposta += `‚Ä¢ Grupos cadastrados: ${statsFinais.totalGrupos}\n\n`;
        
        resposta += `üéâ **RESET CONCLU√çDO COM SUCESSO!**\n\n`;
        resposta += `üí° **Pr√≥ximos passos:**\n`;
        resposta += `‚Ä¢ Sistema de apelidos limpo e pronto\n`;
        resposta += `‚Ä¢ Use \`!apelido NovoNome\` para criar apelidos\n`;
        resposta += `‚Ä¢ Use \`!nick\` para verificar apelidos atuais\n`;
        resposta += `‚Ä¢ Use \`!debug apelidos\` para diagn√≥sticos`;
        
        // Log da opera√ß√£o para auditoria
        logger.warn(`üóëÔ∏è RESET DE APELIDOS executado pelo master ${senderId}`);
        logger.warn(`   Escopo: ${resetAll ? 'TODOS OS GRUPOS' : `Grupo ${groupId}`}`);
        logger.warn(`   Timestamp: ${new Date().toISOString()}`);
        
      } catch (resetError) {
        resposta += `‚ùå **Erro durante o reset:** ${resetError.message}\n\n`;
        resposta += `üí° **Recomenda√ß√µes:**\n`;
        resposta += `‚Ä¢ Tente novamente\n`;
        resposta += `‚Ä¢ Verifique integridade do banco\n`;
        resposta += `‚Ä¢ Contate suporte t√©cnico se necess√°rio`;
        
        logger.error("Erro no reset de apelidos:", resetError);
      }
      
      await msg.reply(resposta);
      
    } catch (error) {
      logger.error("‚ùå Erro no comando resetapelidos:", error.message);
      await msg.reply(
        `‚ùå **Erro interno no comando**\n\n` +
        `üîß Problema: ${error.message}\n\n` +
        `üí° Tente novamente ou contate o suporte t√©cnico.`
      );
    }
  }
};
